namespace std {
    extern(linkname: "malloc") void* malloc(int size);
    extern(linkname: "free") void free(void* ptr);
    extern(linkname: "realloc") void* realloc(void* ptr, int newsize);
    extern(linkname: "calloc") void* calloc(int num, int size);
    extern(linkname: "memcpy") void* memcpy(void* dest, void* src, int n);
    extern(linkname: "memmove") void* memmove(void* dest, void* src, int n);
    extern(linkname: "memcmp") bool memcmp(void* one, void* two, int n);
    extern(linkname: "memset") void* memset(void* dest, int c, int n);
    extern(linkname: "llvm.frameaddress.p0i8") void* frameAddress(int level);
    extern(linkname: "llvm.eh.sjlj.setjmp") int setjmp(char* buff);

    struct pair<F,S> {
        F first;
        S second;

        std::pair<F,S> this(F first, S second) {
            this.first = first;
            this.second = second;
        } => this;

        bool operator==(std::pair<F,S> f, std::pair<F,S> s) => (f.first == s.first) && (f.second == s.second);
        bool operator!=(std::pair<F,S> f, std::pair<F,S> s) => !(f == s);
    }
}

struct SafePtr<T> {
    T* pointer;
    int size = 0;

    SafePtr<T> this {
        this.pointer = cast(T*)null;
        this.size = 0;
    } => this;

    SafePtr<T> this(T* pointer) {
        this.pointer = pointer;
        this.size = 0;
    } => this;

    SafePtr<T> this(T* pointer, int size) {
        this.pointer = pointer;
        this.size = size;
    } => this;

    SafePtr<T> this(int size) {
        if(size > 0) this.pointer = cast(T*)std::malloc(size);
        this.size = size;
    } => this;

    (inline) T get(int n) {
        std::assert((this.pointer != cast(T*)null),"Error using SafePtr: attempt to access the null pointer!\n");
        std::assert(((n < this.size) && (n > 0)),"Error using SafePtr: attempt to access an element outside the pointer!\n");
    } => this.pointer[n];

    (inline) void set(int n, T value) {
        std::assert((this.pointer != cast(T*)null),"Error using SafePtr: attempt to access the null pointer!\n");
        std::assert(((n < this.size) && (n > 0)),"Error using SafePtr: attempt to access an element outside the pointer!\n");
        this.pointer[n] = value;
    } => this;

    void ~this {
        std::free(cast(void*)this.pointer);
        this.pointer = cast(T*)null;
        this.size = 0;
    }
}

namespace std {
    extern(linkname: "malloc") void* malloc(int size);
    extern(linkname: "free") void free(void* ptr);

    int rSl;
    void* realloc(void* ptr, int oldsize, int newsize) {
        while(@atomicTAS(&std::rSl, 1) == 1) {}
            void* newptr = std::malloc(newsize);
            @if((__RAVE_RUNTIME_CHECKS) && (__RAVE_OPTIMIZATION_LEVEL == 0)) {
                std::assert(newptr != null, "Pointer into realloc is null!");
            };
            for(int i=0; i<oldsize; i++) newptr[i] = ptr[i];
            std::free(ptr);
        @atomicClear(&std::rSl);
    } => newptr;

    (inline) void* calloc(int num, int size) => std::malloc(num * size);

    char[1024] __space;
    int __spaceIdx = 0;

    (nochecks) void* alloc(int size) {
        if((ptoi(&std::__space) + 1024 - std::__spaceIdx) >= size) {
            std::__spaceIdx += size;
            return = itop(char*, ptoi(&std::__space) + std::__spaceIdx - size);
        }
        else return = null;
    }

    (nochecks) void afree(void* ptr) {
        if((ptoi(ptr) >= ptoi(&std::__space)) && (ptoi(ptr) < (ptoi(&std::__space) + 1024))) std::__spaceIdx = ptoi(ptr) - ptoi(&std::__space);
    }
}

namespace std {
    (nochecks) void* memcpy(void* dest, void* src, int n) {
        for(int i=0; i<n; i+=1) dest[i] = src[i];
    } => dest;

    (nochecks) void* memmove(void* dest, void* src, int n) {
        void* temp = std::malloc(n);
        for(int i=0; i<n; i+=1) temp[i] = src[i];
        for(int i=0; i<n; i+=1) dest[i] = temp[i];
        std::free(temp);
    } => dest;

    (nochecks) bool memcmp(void* one, void* two, int n) {
        return = true;
        for(int i=0; i<n; i+=1) {
            if(one[i] != two[i]) {
                return = false;
                break;
            }
        }
    }

    (nochecks) void* memset(void* dest, int c, int n) {
        for(int i=0; i<n; i+=1) dest[i] = cast(char)c;
    } => dest;

    extern(linkname: "llvm.frameaddress.p0i8") void* frameAddress(int level);
    extern(linkname: "llvm.eh.sjlj.setjmp") int setjmp(char* buff);

    struct pair<P1, P2> {
        P1 first;
        P2 second;

        std::pair<P1, P2> this(P1 first, P2 second) {
            std::pair<P1, P2> this;
            this.first = first;
            this.second = second;
        } => this;
    }
}

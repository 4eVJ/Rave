namespace std {
    extern(linkname: "malloc") void* malloc(int size);
    extern(linkname: "free") void free(void* ptr);
    extern(linkname: "realloc") void* realloc(void* ptr, int newsize);
    (inline) void* calloc(int num, int size) => std::malloc(num*size);
    (nochecks) void* memcpy(void* dest, void* src, int n) {
        for(int i=0; i<n; i+=1) {
            dest[i] = src[i];
        }
    } => dest;
    (nochecks) void* memmove(void* dest, void* src, int n) {
        void* temp = std::malloc(n);
        for(int i=0; i<n; i+=1) {
            temp[i] = src[i];
        }
        for(int i=0; i<n; i+=1) {
            dest[i] = temp[i];
        }
        std::free(temp);
    } => dest;
    (nochecks) bool memcmp(void* one, void* two, int n) {
        bool result = true;
        for(int i=0; i<n; i+=1) {
            if(one[i] != two[i]) {
                result = false;
                break;
            }
        }
    } => result;
    (nochecks) void* memset(void* dest, int c, int n) {
        for(int i=0; i<n; i+=1) {
            dest[i] = cast(char)c;
        }
    } => dest;
    (nochecks, inline, ctargs) void delete {
        @foreachArgs() {
            @if(@isStructure(@getCurrArgType())) {
                auto s = @getCurrArg(@getCurrArgType());
                ~s;
            };
            @if(!@isStructure(@getCurrArgType())) {
                std::free(@getCurrArg(void*));
            };
        };
    }
    extern(linkname: "llvm.frameaddress.p0i8") void* frameAddress(int level);
    extern(linkname: "llvm.eh.sjlj.setjmp") int setjmp(char* buff);

    struct pair<F,S> {
        F first;
        S second;

        std::pair<F,S> this(F first, S second) {
            this.first = first;
            this.second = second;
        } => this;

        bool operator==(std::pair<F,S> f, std::pair<F,S> s) => (f.first == s.first) && (f.second == s.second);
        bool operator!=(std::pair<F,S> f, std::pair<F,S> s) => !(f == s);
    }
}

@if(((__RAVE_OS == "WINDOWS32") || (__RAVE_OS == "WINDOWS64")) && (!@aliasExists(__RAVE_USELIBC))) {
    namespace std {
        (inline) void* malloc(uint size) => std::winapi::HeapAlloc(std::winapi::GetProcessHeap(), 0, size);
        (inline) void free(void* ptr) {std::winapi::HeapFree(std::winapi::GetProcessHeap(), 0, ptr);}
        (inline) void* realloc(void* ptr, uint newsize) => std::winapi::HeapReAlloc(std::winapi::GetProcessHeap(), 0, ptr, newsize);
    }
};

@if(((__RAVE_OS != "WINDOWS32") && (__RAVE_OS != "WINDOWS64")) || (@aliasExists(__RAVE_USELIBC))) {
    namespace std {
        extern(linkname: "malloc") void* malloc(uint size);
        extern(linkname: "free") void free(void* ptr);
        extern(linkname: "realloc") void* realloc(void* ptr, uint newsize);
    }
};

namespace std {
    (inline) void* calloc(int num, int size) => std::malloc(num*size);
    (nochecks) void* memcpy(void* dest, void* src, int n) {
        for(int i=0; i<n; i+=1) {
            dest[i] = src[i];
        }
    } => dest;
    (nochecks) void* memmove(void* dest, void* src, int n) {
        void* temp = std::malloc(n);
        for(int i=0; i<n; i+=1) {
            temp[i] = src[i];
        }
        for(int i=0; i<n; i+=1) {
            dest[i] = temp[i];
        }
        std::free(temp);
    } => dest;
    (nochecks) bool memcmp(void* one, void* two, int n) {
        bool result = true;
        for(int i=0; i<n; i+=1) {
            if(one[i] != two[i]) {
                result = false;
                break;
            }
        }
    } => result;
    (nochecks) void* memset(void* dest, int c, int n) {
        for(int i=0; i<n; i+=1) {
            dest[i] = cast(char)c;
        }
    } => dest;
    (nochecks, inline, ctargs) void delete {
        @foreachArgs() {
            @if(@isStructure(@getCurrArgType()) && @hasDestructor(@getCurrArgType())) {
                auto s = @getCurrArg(@getCurrArgType());
                ~s;
            };
            @if(!@isStructure(@getCurrArgType()) || !@hasDestructor(@getCurrArgType())) {
                std::free(@getCurrArg(void*));
            };
        };
    }
    extern(linkname: "llvm.frameaddress.p0i8") void* frameAddress(int level);
    extern(linkname: "llvm.eh.sjlj.setjmp") int setjmp(char* buff);
}

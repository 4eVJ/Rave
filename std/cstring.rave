import <std/thread>

namespace libc {
    extern(vararg, linkname: "sprintf") int cformat(char* str, char* fmt);
    extern(linkname: "strtok") char* strtok(char* str, char* chars);
    extern(linkname: "strtol") long strtol(char* str, char** end, int base);
}

namespace std {
    namespace cstring {
        int strlen(const(char)* s) {
            while(s[return] != '\0') return += 1;
        }

        (inline) const(char)* fromBool(bool b) {
            return = "false";
            if(b) return = "true";
        }

        (inline) bool strncmp(const(char)* s1, const(char)* s2, int n) {
            int i = 0;
            bool value = true;
            while(i < n) {
                if(s1[i] != s2[i]) {
                    value = false;
                    break;
                }
                i += 1;
            }
        } => value;

        (inline, nochecks) bool strcmp(const(char)* s1, const(char)* s2) {
            char* _s1 = s1;
            char* _s2 = s2;
            bool result;
            while((_s1[0] != '\0') && (_s1[0] == _s2[0])) {
                _s1 = itop(char*, ptoi(_s1)+1);
                _s2 = itop(char*, ptoi(_s2)+1);
            }
            if(_s1[0] == _s2[0]) result = true;
        } => result;

        (nochecks) char* strstr(const(char)* str, const(char)* substr) {
            int i = 0;
            char* ptr = str;
            bool done = false;

            while(ptr[i] != '\0') {
                if(std::cstring::strncmp(ptr, substr, std::cstring::strlen(substr))) {
                    done = true;
                    break;
                }
                ptr = itop(char*, ptoi(ptr)+1);
            }

            if(!done) ptr = null;
        } => ptr;

        (nochecks) int indexOf(const(char)* str, char ch) {
            while((str[return] != '\0') && (str[return] != ch)) return += 1;
            if(str[return] == '\0') return = -1;
        }

        int ltosSl;
        char[20] ltosBuffer;
        char* ltos(long number, char* endBuffer) {
            std::thread::spinlock::lock(&std::cstring::ltosSl);
            for(int i=0; i<20; i++) std::cstring::ltosBuffer[i] = '\0';

            if(number == 0) {
                endBuffer[0] = '0';
                std::thread::spinlock::unlock(&std::cstring::ltosSl);
                @return(endBuffer);
            }

            bool isNegative = false;
            if(number < 0) {
                isNegative = true;
                number = -number;
            }

            int index = 0;
            while(number > 0) {
                std::cstring::ltosBuffer[index] = ((number % cast(long)10) + '0');
                number = number / 10;
                index += 1;
            }

            if(isNegative) {
                std::cstring::ltosBuffer[index] = '-';
                index += 1;
            }

            endBuffer[index] = '\0';

            int endI = 0;
            for(int i=index-1; i>=0; i--) {
                endBuffer[endI] = std::cstring::ltosBuffer[i];
                endI += 1;
            }

            std::thread::spinlock::unlock(&std::cstring::ltosSl);
        } => endBuffer;
        
        char* dtos(double number, int precision, char* buffer) {
            long lPart;
            int i;
            int len;
            char[24] temp;
            int decimals;

            lPart = cast(long)number;
            std::cstring::ltos(lPart, &temp);
            i = 0;
            len = std::cstring::strlen(&temp);
            while(i < len) {
                buffer[i] = temp[i];
                i += 1;
            }
            number = number - cast(double)lPart;
            buffer[i] = '.';
            i += 1;
            decimals = 0;
            while(decimals < precision) {
                number = number * 10;
                lPart = cast(long)number;
                buffer[i] = lPart + '0';
                i += 1;
                decimals += 1;
                number = number - cast(double)lPart;
            }
            buffer[i] = '\0';
        } => buffer;
    }
}

@if(__RAVE_OS == "LINUX") {
    namespace std {
        namespace library {
            alias RtldLazy = 0x00001;
        
            extern(linkname: "dlopen") void* __open(char* filename, int flags);
            (inline) void* open(char* filename) => std::library::__open(filename, std::library::RtldLazy);
            extern(linkname: "dlclose") int close(void* handle);
            extern(linkname: "dlsym") void* sym(void* handle, char* name);
            extern(linkname: "dlerror") char* error();
        }
    }
};

@if(__RAVE_OS == "WINDOWS") {
    import <std/sysc>

    namespace std {
        namespace library {
            alias RtldLazy = 0x00001;

            extern(linkname: "LoadLibraryA") void* __LoadLibraryA(char* str);
            extern(linkname: "FreeLibrary") int __FreeLibrary(void* ptr);
            extern(linkname: "GetProcAddressA") void* __GetProcAddress(void* handle, char* name);
        
            (inline) void* open(char* filename) => std::library::__LoadLibraryA(filename);
            (inline) int close(void* handle) => std::library::__FreeLibrary(handle);
            (inline) void* sym(void* handle, char* name) => std::library::__GetProcAddress(handle, name);
            (inline) char* error => "";
        }
    }
};

@if((__RAVE_OS != "LINUX") && (__RAVE_OS != "WINDOWS")) {
    namespace std {
        namespace library {
            alias RtldLazy = 0x00001;
        
            extern(linkname: "dlopen") void* __open(char* filename, int flag);
            (inline) void* open(char* filename) => std::library::__open(filename, std::library::RtldLazy);
            extern(linkname: "dlclose") int close(void* handle);
            extern(linkname: "dlsym") void* sym(void* handle, char* name);
            extern(linkname: "dlerror") char* error();
        }
    }
};

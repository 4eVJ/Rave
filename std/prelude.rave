@compileAndLink("<std/io>");

@if((__RAVE_OS == "LINUX") && (!@aliasExists(__RAVE_USELIBC))) {
    @if(@aliasExists(__RAVE_IMPORTED_FROM)) {
        @if(!(@contains(__RAVE_IMPORTED_FROM, "std/sysc.rave")) == true) {
            import <std/sysc>  
        };
    };

    namespace std {
        (inline) void exit(int code) {
            std::syscall(std::sysctable::Exit, code);
        }
    }
};

@if((__RAVE_OS != "LINUX") || (@aliasExists(__RAVE_USELIBC))) {
    namespace std {
        extern(linkname: "exit") void exit(int code);
    }
};

namespace std {
    extern(private, linkname: "_RaveF12std::putswnl") void putswnl(char* msg);

    (inline) void assert(bool cond) {
        if(!cond) {
            std::putswnl("Assert: The conditions haven't been verified!\n");
            std::exit(1);
        }
    }

    (inline) void assert(bool cond, char* msg) {
        if(!cond) {
            std::putswnl(msg);
            std::exit(1);
        }
    }

    namespace dontuse {
        (inline) void _void(bool* b) {} // Just... ignore it?
    }
}

import <std/string>

@if((__RAVE_OS == "LINUX")) {
    namespace std {
        namespace network {
            alias AfInet = 1;
            alias PfInet = 1;
            alias AfInet6 = 2;
            alias SockStream = 1;
            alias ShutRD = 0;
            alias ShutWR = 1;
            alias ShutRDWR = 2;
            alias InAddrAll = 0;

            struct sockaddr {
                int sa_family;
                char[14] sa_data;
            }

            struct sockaddr_storage {
                int sa_family;
                long __ss_align;
                char[120] __ss_padding;
            }

            struct in_addr {
                int s_addr;
            }

            struct sockaddr_in {
                int sa_family;
                short sin_port;
                std::network::in_addr sin_addr;
            }
        }
    }

    import <std/sysc>

    namespace std {
        namespace network {
            (inline) int socket(int domain, int type, int protocol) => cast(int)std::syscall(std::sysctable::Socket, domain, type, protocol);

            (inline) int bind(int sockfd, const(std::network::sockaddr)* addr, int addrlen) => cast(int)std::syscall(std::sysctable::Bind, sockfd, addr, addrlen);
            
            (inline) int shutdown(int sockfd, int how) => cast(int)std::syscall(std::sysctable::Shutdown, sockfd, how);
            
            (inline) int listen(int s, int backlog) => cast(int)std::syscall(std::sysctable::Listen, s, backlog);
            
            (inline) int connect(int sockfd, std::network::sockaddr* addr, int addrlen) => cast(int)std::syscall(std::sysctable::Connect, sockfd, addr, addrlen);
            
            (inline) int getSockName(int sockfd, std::network::sockaddr* addr, int* addrlen) => cast(int)std::syscall(std::sysctable::GetSockName, sockfd, addr, addrlen);
            
            (inline) int close(int sockfd) => cast(int)std::syscall(std::sysctable::Close, sockfd);
            
            (inline) int read(int fd, void* buffer, int cnt) => cast(int)std::syscall(std::sysctable::Read, fd, buffer, cnt);
            
            (inline) int write(int fd, void* buffer, int cnt) => cast(int)std::syscall(std::sysctable::Write, fd, buffer, cnt);
            
            (inline) int accept4(int sockfd, std::network::sockaddr* addr, int* addrlen, int flags) => cast(int)std::syscall(std::sysctable::Accept4, sockfd, addr, addrlen, flags);
            
            (inline) int recvfrom(int s, char* buff, int len, int flags, std::network::sockaddr* src, int* addrlen) => cast(int)std::syscall(std::sysctable::RecvFrom, s, buff, len, flags, src, addrlen);
            
            (inline) int sendto(int s, char* buff, int len, int flags, std::network::sockaddr* dest, int addrlen) => cast(int)std::syscall(std::sysctable::SendTo, s, buff, len, flags, dest, addrlen);
            
            (inline) int send(int s, char* buff, int len, int flags) => std::network::sendto(s, buff, len, flags, cast(std::network::sockaddr*)null, 0);

            short htons(short n) {
                short netshort;
                char* nptr = cast(char*)&n;
                char* netshortptr = cast(char*)&netshortptr;
                netshortptr[0] = nptr[1];
                netshortptr[1] = nptr[0];
            } => netshort;

            extern(linkname: "htonl") uint htonl(uint host);
            extern(linkname: "inet_addr") int inetAddr(char* ip);

            namespace request {
                void get(int fd, char* path, char* contentType, char* content) {
                    if((contentType != null) && (std::cstring::strlen(contentType) > 0)) {
                        std::__sprint("GET ", path, " HTTP/1.0\r\nContent-type: ", contentType, "\r\nContent-length: ", std::cstring::strlen(content), "\r\n\r\n", content, "\r\n");
                    }
                    else std::__sprint("GET ", path, " HTTP/1.0\r\n\r\n");
                    std::network::send(fd, std::sprintBuffer.c(), std::sprintBuffer.length, 0);
                }

                (inline) void post(int fd, char* path, char* contentType, char* content) {
                    std::__sprint("POST ", path, " HTTP/1.0\r\nContent-type: ", contentType, "\r\nContent-length: ", std::cstring::strlen(content), "\r\n\r\n", content, "\r\n");
                    std::network::send(fd, std::sprintBuffer.c(), std::sprintBuffer.length, 0);
                }
            }
        }
    }
};
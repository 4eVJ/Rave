import <std/io> <std/ascii> <std/vector> <std/map>

namespace std {
    namespace json {
        alias Lbra = 0;
        alias Rbra = 1;
        alias String = 2;
        alias SetVal = 3;
        alias Integer = 4;
        alias Float = 5;
        alias Char = 6;
        alias True = 7;
        alias False = 8;
        alias Comma = 9;

        struct token {
            int type;
            void* value;

            std::json::token this(int type, void* value) {
                this.type = type;
                this.value = value;
            } => this;
        }

        struct value {
            int type;
            void* value;

            std::json::value this(int type, void* value) {
                this.type = type;
                this.value = value;
            } => this;
        }

        std::vector<std::json::token> tokenize(char* str) {
            auto tokens = std::vector<std::json::token>();

            int i = 0;
            const int length = libc::strlen(str);

            while(i<length) {
                if(str[i] == '{') {
                    tokens.add(std::json::token(std::json::Rbra,"{")); i += 1;
                }
                else if(str[i] == '}') {
                    tokens.add(std::json::token(std::json::Lbra,"}")); i += 1;
                }
                else if(str[i] == ',') {
                    tokens.add(std::json::token(std::json::Comma,",")); i += 1;
                }
                else if(str[i] == ':') {
                    tokens.add(std::json::token(std::json::SetVal,":")); i += 1;
                }
                else if(std::ascii::isDigit(str[i])) {
                    std::string buffer = std::string("");

                    while(std::ascii::isDigit(str[i]) && i<length) {
                        buffer.append(str[i]);
                        i += 1;
                    }

                    tokens.add(std::json::token(std::json::Integer,cast(void*)buffer.toLong()));
                    ~buffer;
                }
                else if(str[i] == ' ') i += 1;
                else if(str[i] == '\n') i += 1;
                else if(str[i] == '\t') i += 1;
                else if(str[i] == '"') {
                    i += 1;
                    std::string buffer = std::string("");

                    while((str[i] != '"') && i<length) {
                        buffer.append(str[i]);
                        i += 1;
                    }
                    i += 1;

                    tokens.add(std::json::token(std::json::String,buffer.c()));
                    ~buffer;
                }
            }
        } => tokens;
    }
}
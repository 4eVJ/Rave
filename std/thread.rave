import <std/process>

@if(__RAVE_OS == "LINUX") {
    namespace std {
        namespace thread {
            int getCurrentID => cast(int)std::syscall(std::sysctable::GetTID);
        }
    }
};

@if((__RAVE_OS == "WINDOWS32") || (__RAVE_OS == "WINDOWS64")) {
    namespace std {
        namespace thread {
            int getCurrentID => std::winapi::GetCurrentThreadId();
        }
    }
};

namespace std {
    namespace thread {
        namespace spinlock {
            (nochecks) void initialize(int* sl) {sl[0] = 0;}
            (nochecks) int __tas(int* sl) => cast(int)cmpxchg(sl, 0, 1);
            (nochecks) void lock(int* sl) {sl[0] = 1; while(std::thread::spinlock::__tas(sl) == 0) {}}
            (nochecks) void unlock(int* sl) {sl[0] = 0;}
        }
        struct Spinlock {
            int value;

            std::thread::Spinlock this {this.value = 0;} => this;

            (inline) void lock {std::thread::spinlock::lock(this.&value);}
            (inline) void unlock {this.value = 0;}
        }
    }
}
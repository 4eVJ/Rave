import <std/process>

@if(__RAVE_OS == "LINUX") {
    namespace std {
        namespace thread {
            int getCurrentID => cast(int)std::syscall(std::sysctable::GetTID);
        }
    }
};

@if((__RAVE_OS == "WINDOWS32") || (__RAVE_OS == "WINDOWS64")) {
    namespace std {
        namespace thread {
            int getCurrentID => std::winapi::GetCurrentThreadId();
        }
    }
};

namespace std {
    struct Atomic {
        volatile int cell;

        std::Atomic this(int value) {this.cell = value;} => this;

        void store(int value) {std::atomic::store(this.&cell, value);}
        int load => std::atomic::load(this.&cell);
        int exchange(int value) => std::atomic::exchange(this.&cell, value);
    }
}

@if(@aliasExists(__RAVE_USEPTHREADS)) {
    @addLibrary("pthread");
    namespace std {
        namespace thread {
            namespace spinlock {
                extern(linkname: "pthread_spin_init") int initialize(int* sl, int flag);
                extern(linkname: "pthread_spin_lock") int lock(int* sl);
                extern(linkname: "pthread_spin_unlock") int unlock(int* sl);
            }
        }
    }
};
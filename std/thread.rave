import <std/process>

@if(__RAVE_OS == "LINUX") {
    namespace std {
        namespace thread {
            int getCurrentID => cast(int)std::syscall(std::sysctable::GetTID);
        }
    }
};

@if((__RAVE_OS == "WINDOWS32") || (__RAVE_OS == "WINDOWS64")) {
    namespace std {
        namespace thread {
            int getCurrentID => std::winapi::GetCurrentThreadId();
        }
    }
};

namespace std {
    namespace thread {
        // This is a temporary implementation that may not work efficiently
        struct Mutex {
            bool isUsed;

            std::thread::Mutex this {
                this.isUsed = false;
            } => this;

            void wait {
                int tid = std::thread::getCurrentID() / 10;
                for(int i=0; i<tid; i+=1) {}
            }

            void lock {
                this.wait();
                while(this.isUsed) this.wait();
                this.isUsed = true;
            }

            void unlock {
                this.isUsed = false;
            }
        }
    }
}
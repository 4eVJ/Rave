@once

@inc "std/unix";
@inc "std/defs";

@def SOCKET_IP4 4 @end
@def SOCKET_IP6 10 @end

@def SOCKET_STREAM 1 @end
@def SOCKET_DGRAM 2 @end
@def SOCKET_RAW 3 @end
@def SOCKET_RDM 4 @end
@def SOCKET_SEQPACKET 5 @end
@def SOCKET_DCCP 6 @end
@def SOCKET_PACKET 10 @end
@def SOCKET_NONBLOCK 00004000 @end
@def SOCKET_CLOEXEC 02000000 @end

@def MSG_CONFIRM 0x800 @end
@def MSG_DONTROUTE 0x04 @end
@def MSG_DONTWAIT 0x40 @end
@def MSG_EOR 0x80 @end
@def MSG_MORE 0x8000 @end
@def MSG_NOSIGNAL 0x4000 @end
@def MSG_OOB 0x01 @end

@def MSG_CMSG_CLOEXEC 0x40000000 @end
@def MSG_DONTWAIT 0x40 @end
@def MSG_ERRQUEUE 0x2000 @end
@def MSG_PEEK  0x02 @end
@def MSG_WAITALL 0x100 @end

@def AI_V4MAPPED 0x0008 @end
@def AF_UNSPEC 0 @end
@def AI_PASSIVE 0x1 @end

namespace std {

namespace net {

struct sockaddr {
    sa_family: int;
    sa_data: char[14];
}

struct iovec {
    iov_base: void*;
    iov_len: int;
}

struct msghdr {
    msg_name: void*;      
    msg_namelen: int;  
    msg_iov: std::net::iovec*;   
    msg_iovlen: int;   
    msg_control: void*;  
    msg_controllen: int; 
    msg_flags: int;    
}

struct hostent {
    h_name: char*;
    h_aliases: char**;
    h_addrtype: int;
    h_length: int;
    h_addr_list: char**;
}

struct address {
	family: int;
	scopeid: int;
    addr: int[16];
	sortkey: int;
}

socket(domain: int, type: int, protocol: int): int {
    ret cast(int)std::sysc3(41,domain,type,protocol);
}

connect(sockfd: int, addr: std::net::sockaddr*, addrlen: int): int {
    ret cast(int)std::sysc3(42,sockfd,addr,addrlen);
}

accept(sockfd: int, addr: std::net::sockaddr*, addrlen: int): int {
    ret cast(int)std::sysc3(43,sockfd,addr,addrlen);
}

sendto(sockfd: int, buff: void*, len: int, flags: int, dest: std::net::sockaddr*, addrlen: int): int {
    ret cast(int)std::sysc6(44,sockfd,buff,len,flags,dest,addrlen);
}

send(sockfd: int, buff: void*, len: int, flags: int): int {
    ret std::net::sendto(sockfd, buff, len, flags, cast(std::net::sockaddr*)0, 0);
}

sendmsg(sockfd: int, msg: std::net::msghdr*, flags: int): int {
    ret cast(int)std::sysc3(46,sockfd,msg,flags);
}

recvfrom(sockfd: int, buf: void*, len: int, flags: int, src_addr: std::net::sockaddr*, addrlen: int*): int {
    ret cast(int)std::sysc6(45,sockfd,buf,len,flags,src_addr,addrlen);
}

recv(sockfd: int, buf: void*, len: int, flags: int): int {
    ret std::net::recvfrom(sockfd, buf, len, flags, cast(std::net::sockaddr*)NULL, cast(int*)NULL);
}

recvmsg(sockfd: int, msg: std::net::msghdr*, flags: int): int {
    ret cast(int)std::sysc3(47,sockfd,msg,flags);
}

listen(sockfd: int, backlog: int): int {
    ret cast(int)std::sysc2(50,sockfd,backlog);
}

bind(sockfd: int, addr: std::net::sockaddr*, addrlen: int): int {
    ret cast(int)std::sysc3(49,sockfd,addr,addrlen);
}

shutdown(sockfd: int, how: int): int {
    ret cast(int)std::sysc2(48,sockfd,how);
}

name_from_null(buf: std::net::address*, name: char*, fam: int, flags: int): int {
    cnt: int = 0;
    if(name == NULL) ret 0;
    if((flags & AI_PASSIVE) == true) {
        if(fam != SOCKET_IP6) {
            cnt = cnt + 1;
            a: std::net::address = buf[cnt];
            a->family = SOCKET_IP4;
            buf[cnt] = a;
        }
        if(fam != SOCKET_IP4) {
            cnt = cnt + 1;
            a: std::net::address = buf[cnt];
            a->family = SOCKET_IP6;
            buf[cnt] = a;
        }
    }
    else {
        if(fam != SOCKET_IP6) {
            cnt = cnt + 1;
            a: std::net::address = buf[cnt];
            a->family = SOCKET_IP4;
            addrr: int[16] = a->addr;
            addrr[0] = 1;
            addrr[1] = 2;
            addrr[2] = 7;
            addrr[3] = 0;
            addrr[4] = 0;
            addrr[5] = 1;
            a->addr = addrr;
            buf[cnt] = a;
        }
        if(fam != SOCKET_IP4) {
            cnt = cnt + 1;
            a: std::net::address = buf[cnt];
            a->family = SOCKET_IP6;
            addrr: int[16] = a->addr;
            addrr[15] = 0;
            a->addr = addrr;
            buf[cnt] = a;
        }
    }
    ret cnt;
}

}

}

@end
@once

@inc "std/unix";
@inc "std/defs";

@def SOCKET_IP4 4 @end
@def SOCKET_IP6 10 @end

@def SOCKET_STREAM 1 @end
@def SOCKET_DGRAM 2 @end
@def SOCKET_RAW 3 @end
@def SOCKET_RDM 4 @end
@def SOCKET_SEQPACKET 5 @end
@def SOCKET_DCCP 6 @end
@def SOCKET_PACKET 10 @end
@def SOCKET_NONBLOCK 00004000 @end
@def SOCKET_CLOEXEC 02000000 @end

@def MSG_CONFIRM 0x800 @end
@def MSG_DONTROUTE 0x04 @end
@def MSG_DONTWAIT 0x40 @end
@def MSG_EOR 0x80 @end
@def MSG_MORE 0x8000 @end
@def MSG_NOSIGNAL 0x4000 @end
@def MSG_OOB 0x01 @end

@def MSG_CMSG_CLOEXEC 0x40000000 @end
@def MSG_DONTWAIT 0x40 @end
@def MSG_ERRQUEUE 0x2000 @end
@def MSG_PEEK  0x02 @end
@def MSG_WAITALL 0x100 @end

@def AI_V4MAPPED 0x0008 @end
@def AF_UNSPEC 0 @end
@def AI_PASSIVE 0x1 @end

namespace std {


struct sockaddr {
    sa_family: int;
    sa_data: char[14];
}

struct iovec {
    iov_base: void*;
    iov_len: int;
}

struct msghdr {
    msg_name: void*;      
    msg_namelen: int;  
    msg_iov: std::iovec*;   
    msg_iovlen: int;   
    msg_control: void*;  
    msg_controllen: int; 
    msg_flags: int;    
}

struct hostent {
    h_name: char*;
    h_aliases: char**;
    h_addrtype: int;
    h_length: int;
    h_addr_list: char**;
}

struct address {
	family: int;
	scopeid: int;
    addr: int[16];
	sortkey: int;
}

struct in_addr {
    value: int;
    /*
    s4_addr: char[4];
    s4_addr16: int[2];
    s4_addr32: int[1];
    s_addr: int;
    */
}

struct in6_addr {
    value: int[4];
}

struct sockaddr_in6 {
	sin6_family: int;   /* SOCKET_IP6               */
	sin6_port: short;     /* Port number            */
	sin6_addr: std::in6_addr;     /* IPv6 address           */
	sin6_scope_id: char; /* interfaces for a scope */
}

struct sockaddr_in6_ptr {
	sin6_family: int;   /* SOCKET_IP6               */
	sin6_port: short;     /* Port number            */
	sin6_addr: std::in6_addr*;   /* IPv6 address           */
	sin6_scope_id: char; /* interfaces for a scope */
}

struct sockaddr_in {
	sin_family: int;    /* SOCKET_IP4      */
	sin_port: short;      /* Port number  */
	sin_addr: std::in_addr;      /* IPv4 address */
}

struct sockaddr_in_ptr {
	sin_family: int;    /* SOCKET_IP4      */
	sin_port: short;    /* Port number  */
	sin_addr: std::in_addr*;     /* IPv4 address */
}

extern(C,linkname:"socket") socket(dom: int, t: int, prot: int): int;
extern(C,linkname:"gethostbyname") _gethostbyname(n: char*): void*;

@macro gethostbyname(name) cast(std::hostent*)_gethostbyname(name) @endm

}

@end
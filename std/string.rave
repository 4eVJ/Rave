import <std/vector> <std/cstring> <std/ascii>

namespace libc {
    // Functions that are practically unnecessary in normal use and come from libc
    extern(linkname: "snprintf") int cformatn(char* str, int size, char* fmt, ...);
    extern(linkname: "sprintf") int cformat(char* str, char* fmt, ...);
    extern(linkname: "strtok") char* strtok(char* str, char* chars);
    extern(linkname: "strtol") long strtol(char* str, char** end, int base);
}

namespace std {
    extern(linkname: "sscanf") int format(char* buff, char* fmt);
    (inline) int _lengthOfNumber(long x) {
        if(x < 0) x = x * (-1);
        int len = 1;

        if(x >= 1000000000000) len = 13;
        else if(x >= 100000000000) len = 12;
        else if(x >= 10000000000) len = 11;
        else if(x >= 1000000000) len = 10;
        else if(x >= 100000000) len = 9;
        else if(x >= 10000000) len = 8;
        else if(x >= 1000000) len = 7;
        else if(x >= 100000) len = 6;
        else if(x >= 10000) len = 5;
        else if(x >= 1000) len = 4;
        else if(x >= 100) len = 3;
        else if(x >= 10) len = 2;
    } => len;
    (inline) int lengthOfNumber(long x) {
        int len = 0;

        if(x<0) len = std::_lengthOfNumber(-x)+1;
        else len = std::_lengthOfNumber(x);
    } => len;

    struct string {
        char* data;
        int length;
        int capacity;

        std::string this(char* a) {
            if(a != null) {
                this.length = std::cstring::strlen(a);
                this.capacity = this.length*2;
                if(this.capacity == 0) this.capacity = 1;
                this.data = std::malloc(this.capacity);

                int i = 0;
                while(i<this.length) {
                    this.data[i] = a[i];
                    i += 1;
                }
            }
            else {
                this.length = 0;
                this.capacity = 1;
                this.data = std::malloc(this.capacity);
            }
        } => this;

        bool isDeleted => (this.data == null);

        bool has(char c) {
            bool _has = false;

            int i = 0;
            while(i<this.length) {
                if(this.data[i] == c) {
                    _has = true;
                    i = this.length;
                }
                i += 1;
            }
        } => _has;

        char* c {
            char* temp = std::malloc(this.length+1);
            int i = 0;
            while(i<this.length) {temp[i] = this.data[i]; i += 1;}
            temp[i] = '\0';
        } => temp;

        (inline) char toChar => this.data[0];
        (inline) long toLong => libc::strtol(this.c(),cast(char**)null,10);
        (inline) int toInt => cast(int)this.toLong();

        int indexOf(char c) {
            int i = 0;
            int needed = -1;
            while(i<this.length) {if(this.data[i] == c) {needed = i; i = this.length;} i += 1;}
        } => needed;

        int indexOf(char* s) {
            char* _c = this.c();
            char* p = std::cstring::strstr(_c,s);

            int index = 0;
            if(p == null) index = -1;
            else index = (cast(int)p)-(cast(int)_c);
        } => index;

        int indexOf(std::string s) => this.indexOf(s.c());

        void add(char c) {
            this.length += 1;
            if(this.length == this.capacity) {
                this.capacity = this.capacity * 2;
                this.data = std::realloc(this.data,this.capacity);
            }
            this.data[this.length-1] = c;
        }

        void append(std::string str) {
            int i = 0;
            while(i<str.length) {
                this.add(str.data[i]);
                i += 1;
            }
        }

        void append(char* cstr) {
            int len = std::cstring::strlen(cstr);
            int i = 0;
            while(i<len) {
                this.add(cstr[i]);
                i += 1;
            }
        }

        std::string copy {
            std::string cp = std::string("");

            int i = 0;
            cp.append(*this);
        } => cp;

        std::string via(char c) {
            std::string _cp = this.copy();
            _cp.add(c);
        } => _cp;

        std::string via(std::string s) {
            std::string _cp = this.copy();
            _cp.append(s);
        } => _cp;

        std::string via(char* s) {
            std::string _cp = this.copy();
            _cp.append(s);
        } => _cp;

        std::string replace(char c, char to) {
            std::string temp = this.copy();

            int i = 0;
            while(i<this.length) {
                if(this.data[i] == c) {
                    temp.data[i] = to;
                }
                i += 1;
            }
        } => temp;

        std::string operator+(std::string one, std::string two) {
            std::string third = std::string(one.c());
            third.append(two);
        } => third;

        bool compare(std::string another) {
            bool isEqual = true;
            if(this.length != another.length) {
                isEqual = false;
            }
            else {
                int i = 0;
                while(i<another.length) {
                    if(this.data[i] != another.data[i]) isEqual = false;
                    i += 1;
                }
            }
        } => isEqual;

        bool compare(char* another) {
            bool isEqual = true;
            int len = std::cstring::strlen(another);

            if(this.length != len) {
                isEqual = false;
            }
            else {
                int i = 0;
                while(i<len) {
                    if(this.data[i] != another[i]) isEqual = false;
                    i += 1;
                }
            }
        } => isEqual;

        bool operator==(std::string one, std::string two) => one.compare(two);
        bool operator==(std::string one, char* two) => one.compare(two);
        bool operator!=(std::string one, std::string two) => !(one.compare(two));
        bool operator!=(std::string one, char* two) => !(one.compare(two));
        void operator=(std::string* one, char* two) {
            one[0] = std::string(two);
        }

        std::string substring(int from, int to) {
            std::string temp = "";

            int i = from;
            while(i<to) {
                temp.add(this.data[i]);
                i += 1;
            }
        } => temp;

        std::vector<std::string> splitByChars(char* chars) {
            std::vector<std::string> parts = std::vector<std::string>();

            char* _c = this.c();
            char* _cp = libc::strtok(_c,chars);

            while(_cp != null) {
                parts.add(std::string(_cp));
                _cp = libc::strtok(null,chars);
            }

            std::free(_c);
        } => parts;

        std::string ltrim {
            char* _c = this.c();

            while(std::ascii::isWhitespace(_c[0])) _c = cast(char*)((cast(int)_c) + 1);

            std::string _s = std::string(_c);
        } => _s;

        std::string rtrim {
            char* _c = this.c();

            int i = std::cstring::strlen(_c)-1;
            while(std::ascii::isWhitespace(_c[i])) i -= 1;
            _c[i+1] = '\0';

            std::string _s = std::string(_c);
        } => _s;

        std::string trim {
            std::string _l = this.ltrim();
        } => _l.rtrim();

        (inline) std::vector<std::string> splitByChars(std::string chars) => this.splitByChars(chars.c());

        void ~this {
            std::free(this.data);
        }
    }

    namespace string {
        (inline) std::string fromNumber(long n) {
            char* buf = std::malloc(std::lengthOfNumber(n)+2);
            libc::cformat(buf,"%ld",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
        (inline) std::string fromNumber(int n) => std::string::fromNumber(cast(long)n);
        (inline) std::string fromNumber(short n) => std::string::fromNumber(cast(long)n);
        (inline) std::string fromNumber(char n) => std::string::fromNumber(cast(long)n);
        (inline) std::string fromNumber(bool n) => std::string::fromNumber(cast(long)n);

        (inline) std::string fromFloat(float n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%f",cast(double)n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
        (inline) std::string fromFloat1(float n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.1f",cast(double)n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
        (inline) std::string fromFloat2(float n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.2f",cast(double)n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
        (inline) std::string fromFloat3(float n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.3f",cast(double)n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
        (inline) std::string fromFloat4(float n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.4f",cast(double)n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
        (inline) std::string fromFloat5(float n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.5f",cast(double)n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
        (inline) std::string fromDouble(double n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%f",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
        (inline) std::string fromDouble1(double n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.1f",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
        (inline) std::string fromDouble2(double n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.2f",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
        (inline) std::string fromDouble3(double n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.3f",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
        (inline) std::string fromDouble4(double n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.4f",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
        (inline) std::string fromDouble5(double n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.5f",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;

        (inline) std::string fromUNumber(long n) {
            char* buf = std::malloc((std::lengthOfNumber(n)*2)+2);
            libc::cformat(buf,"%lu",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
        (inline) std::string fromUNumber(int n) {
            char* buf = std::malloc((std::lengthOfNumber(cast(long)n)*2)+2);
            libc::cformat(buf,"%u",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
        (inline) std::string fromUNumber(short n) {
            char* buf = std::malloc((std::lengthOfNumber(cast(long)n)*2)+2);
            libc::cformat(buf,"%d",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
        (inline) std::string fromUNumber(char n) {
            char* buf = std::malloc((std::lengthOfNumber(cast(long)n)*2)+2);
            libc::cformat(buf,"%d",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
    }

    (ctargs) std::string sprint {
        std::string result = "";
        std::vector<void*> values = std::vector<void*>();
        std::vector<char*> types = std::vector<char*>();

        @foreachArgs() {
            @if(@typesIsNequals(@getCurrArgType(),float)) {
                @if(@typesIsNequals(@getCurrArgType(),double)) {
                    @if(@typesIsNequals(@getCurrArgType(),std::string)) {
                        /*@if(@typesIsEquals(@getCurrArgType(),std::ustring)) {
                            std::ustring us = @getCurrArg(std::ustring);
                            values.add(cast(void*)&us);
                            types.add("std::ustring*");
                        };*/
                        //@if(@typesIsNequals(@getCurrArgType(),std::ustring)) {
                            values.add(@getCurrArg(void*));
                            types.add(@typeToString(@getCurrArgType()));
                        //};
                    };
                    @if(@typesIsEquals(@getCurrArgType(),std::string)) {
                        std::string s = @getCurrArg(std::string);
                        values.add(cast(void*)&s);
                        types.add("std::string*");
                    };
                };
                @if(@typesIsEquals(@getCurrArgType(),double)) {
                    double d = @getCurrArg(double);
                    values.add(cast(void*)&d);
                    types.add("double");
                };
            };
            @if(@typesIsEquals(@getCurrArgType(),float)) {
                double f = @getCurrArg(double);
                values.add(cast(void*)&f);
                types.add("double");
            };
        };

        int i = 0;
        while(i<types.length) {
            if(types.data[i] == "char*") {
                result.append(values.data[i]);
            }
            else if((types.data[i] == "std::string") || (types.data[i] == "std::string*")) {
                std::string* s = cast(std::string*)values.data[i];
                result.append(s);
            }
            else if((types.data[i] == "float") || (types.data[i] == "double")) {
                double* d = cast(double*)values.data[i];
                std::string s = std::string::fromDouble(d[0]);
                    result.append(s);
                ~s;
            }
            else if((types.data[i] == "long" || types.data[i] == "int") || types.data[i] == "short") {
                long l = cast(long)values.data[i];
                std::string s = std::string::fromNumber(l);
                    result.append(s);
                ~s;
            }
            else if(types.data[i] == "bool") {
                bool b = cast(bool)values.data[i];
                if(b) result.append("true");
                else result.append("false");
            }
            else if(types.data[i] == "char") {
                result.add(cast(char)values.data[i]);
            }
            i += 1;
        }
    } => result;
}

import <std/memory>

namespace libc {
    // Functions that are practically unnecessary in normal use and come from libc
    extern(linkname: "strlen") int strlen(char* cstr);
    char* btos(bool b) {
        char* toret = "true";
        if(b == false) toret = "false";
    } => toret;
}

namespace std {
    struct string {
        char* data;
        int length;

        std::string* this(char* a) {
            this.length = libc::strlen(a);
            //this.data = std::malloc(this.length+1);
            this.data = std::malloc(this.length);

            int i = 0;
            while(i<this.length) {
                this.data[i] = a[i];
                i += 1;
            }
            //this.data[i] = '\0';
        } => this;

        bool isDeleted => (this.data == null);
        char toChar => this.data[0];

        bool has(char c) {
            bool _has = false;

            int i = 0;
            while(i<this.length) {
                if(this.data[i] == c) {
                    _has = true;
                    i = this.length;
                }
                i += 1;
            }
        } => _has;

        void replace(char c, char to) {
            int i = 0;
            while(i<this.length) {
                if(this.data[i] == c) {
                    this.data[i] = to;
                }
                i += 1;
            }
        }

        char* c {
            char* temp = std::malloc(this.length+1);
            int i = 0;
            while(i<this.length) {temp[i] = this.data[i]; i += 1;}
            temp[i] = '\0';
            return temp;
        }

        void destroy {
            std::free(this.data);
            if(this.data != null) this.data = null;
        }

        int indexOf(char c) {
            int i = 0;
            int needed = -1;
            while(i<this.length) {if(this.data[i] == c) {needed = i; i = this.length;} i += 1;}
        } => needed;

        void append(char c) {
            this.length += 1;
            this.data = std::realloc(this.data,this.length);
            this.data[this.length-1] = c;
        }

        void append(std::string* str) {
            int i = 0;
            while(i<str.length) {
                this.append(str.data[i]);
                i += 1;
            }
        }

        void append(char* cstr) {
            int i = 0;
            while(cstr[i] != '\0') {
                this.append(cstr[i]);
                i += 1;
            }
        }
    }
}

macro S {
    return std::string(#0);
}
import <std/vector> <std/cstring> <std/ascii> <std/utf8>
import <std/thread> <std/strutil>

namespace std {
    extern(private, linkname: "sscanf") int format(char* buff, char* fmt);

    (data: "data", length: "length") struct string {
        char* data;
        int length;
        int capacity;

        std::string this(char* str) {
            std::string this;
            if(str != null) {
                this.length = std::cstring::strlen(str);
                this.capacity = (this.length * 2) + 2;
                if(this.capacity <= 0) this.capacity = 2;
                this.data = std::malloc(this.capacity);

                int i = 0;
                while(i<this.length) {
                    this.data[i] = str[i];
                    i += 1;
                }
                this.data[i] = '\0';
            }
            else {
                this.length = 0;
                this.capacity = 2;
                this.data = std::malloc(this.capacity);
                this.data[0] = '\0';
            }
        } => this;

        std::string this(int n) {
            std::string this;
            this.length = 0;
            this.capacity = n+1;
            if(this.capacity <= 0) this.capacity = 2;
            this.data = std::malloc(this.capacity);
            this.data[0] = '\0';
        } => this;

        void operator=(std::string* one, char* two) {one[0] = std::string(two);}

        void ~this {
            std::free(this.data);
            this.data = null;
        }

        void setValue(char* a) {
            if(a != null) {
                this.length = std::cstring::strlen(a);
                this.capacity = (this.length * 2) + 2;
                if(this.capacity <= 0) this.capacity = 2;
                if(this.data != null) std::free(this.data);
                this.data = std::malloc(this.capacity);

                int i = 0;
                while(i<this.length) {
                    this.data[i] = a[i];
                    i += 1;
                }
                this.data[i] = '\0';
            }
            else {
                this.length = 0;
                this.capacity = 2;
                if(this.data != null) std::free(this.data);
                this.data = std::malloc(this.capacity);
                this.data[0] = '\0';
            }
        }

        (inline) void set(int index, char ch) {
            if((index >= 0) && (index < this.length)) this.data[index] = ch;
        }

        (inline) char at(int index) {
            if((index >= 0) && (index < this.length)) return = this.data[index];
            else return = '\0';
        }

        (inline) bool isDeleted => (this.data == null);

        (inline) char* c => this.data;

        (inline) char toChar => this.data[0];
        (inline) long toLong => libc::strtol(this.c(), cast(char**)null, 10);
        (inline) int toInt => cast(int)this.toLong();

        int indexOf(char c) {
            int i = 0;
            int needed = -1;
            while(i<this.length) {if(this.data[i] == c) {needed = i; i = this.length;} i += 1;}
        } => needed;

        int indexOf(char* s) {
            char* _c = this.c();
            char* p = std::cstring::strstr(_c, s);

            int index = 0;
            if(p == null) index = -1;
            else index = (cast(int)p)-(cast(int)_c);
        } => index;

        (inline) int indexOf(std::string s) => this.indexOf(s.c());

        void add(char c) {
            this.length += 1;
            if(this.length == this.capacity) {
                this.capacity = this.capacity * 2;
                this.data = std::realloc(this.data, this.capacity);
            }
            this.data[this.length-1] = c;
        }

        void append(std::string str) {
            int i = 0;
            while(i<str.length) {
                this.add(str.data[i]);
                i += 1;
            }
        }

        void appendC(char* cstr) {
            int len = std::cstring::strlen(cstr);
            int i = 0;
            while(i<len) {
                this.add(cstr[i]);
                i += 1;
            }
        }

        (inline) std::string copy {
            std::string cp = std::string("");
            cp.append(this);
        } => cp;

        std::string replace(char c, char to) {
            std::string temp = this.copy();

            int i = 0;
            while(i<this.length) {
                if(this.data[i] == c) {
                    temp.data[i] = to;
                }
                i += 1;
            }
        } => temp;

        std::string substring(int from, int to) {
            std::string temp = "";

            int i = from;
            while(i<to) {
                temp.add(this.data[i]);
                i += 1;
            }
        } => temp;

        std::string operator+(std::string one, std::string two) {
            std::string third = "";
            for(int i=0; i<one.length; i+=1) third.add(one.data[i]);
            for(int i=0; i<two.length; i+=1) third.add(two.data[i]);
        } => third;

        bool operator==(std::string one, std::string two) {
            bool isEqual = true;
            if(one.length != two.length) isEqual = false;
            else {
                for(int i=0; i<one.length; i+=1) {
                    if(one.data[i] != two.data[i]) {
                        isEqual = false;
                        break;
                    }
                }
            }
        } => isEqual;

        bool operator==(std::string one, char* two) {
            bool isEqual = true;
            int length = std::cstring::strlen(two);
            if(one.length != length) isEqual = false;
            else {
                for(int i=0; i<one.length; i+=1) {
                    if(one.data[i] != two[i]) {
                        isEqual = false;
                        break;
                    }
                }
            }
        } => isEqual;

        std::vector<std::string> split(char ch) {
            return = std::vector<std::string>();

            int idx = 0;
            std::string buffer = "";
            while(idx < this.length) {
                if(this.data[idx] != ch) {
                    buffer.add(this.data[idx]);
                    idx += 1;
                }
                else {
                    if(buffer.length > 0) return.add(buffer.copy());
                    buffer.length = 0;
                    idx += 1;
                }
            }
            if(buffer.length > 0) return.add(buffer.copy());
            ~buffer;
        }

        std::string ltrim {
            int idx = 0;
            while((idx < this.length) && (std::ascii::isSpace(this.data[idx]))) idx += 1;
        } => this.substring(idx, this.length);

        std::string rtrim {
            int idx = this.length - 1;
            while(std::ascii::isSpace(this.data[idx])) idx -= 1;
        } => this.substring(0, idx+1);

        (inline) std::string trim => this.ltrim().rtrim();

        std::string insert(int pos, char* str) {
            std::string buffer = "";
            int i = 0;
            while(i < pos) {
                buffer.add(this.data[i]);
                i += 1;
            }
            buffer.appendC(str);
            while(i < this.length) {
                buffer.add(this.data[i]);
                i += 1;
            }
        } => buffer;
    }

    namespace string {
        (inline) std::string fromNumber(long n) {
            char* buf = std::malloc(std::lengthOfNumber(n)+2);
            libc::cformat(buf,"%ld",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
        
        (inline) std::string fromNumber(int n) => std::string::fromNumber(cast(long)n);
        (inline) std::string fromNumber(short n) => std::string::fromNumber(cast(long)n);
        (inline) std::string fromNumber(char n) => std::string::fromNumber(cast(long)n);
        (inline) std::string fromNumber(bool n) => std::string::fromNumber(cast(long)n);

        (inline) std::string fromFloat(float n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%f",cast(double)n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;

        (inline) std::string fromFloat1(float n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.1f",cast(double)n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;

        (inline) std::string fromFloat2(float n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.2f",cast(double)n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;

        (inline) std::string fromFloat3(float n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.3f",cast(double)n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
        
        (inline) std::string fromFloat4(float n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.4f",cast(double)n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;

        (inline) std::string fromFloat5(float n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.5f",cast(double)n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;

        (inline) std::string fromDouble(double n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%f",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;

        (inline) std::string fromDouble1(double n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.1f",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;

        (inline) std::string fromDouble2(double n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.2f",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;

        (inline) std::string fromDouble3(double n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.3f",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
        
        (inline) std::string fromDouble4(double n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.4f",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;

        (inline) std::string fromDouble5(double n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.5f",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;

        (inline) std::string fromDouble6(double n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.6f",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;

        (inline) std::string fromDouble7(double n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.7f",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;

        (inline) std::string fromDouble8(double n) {
            char* buf = std::malloc(128);
            libc::cformat(buf,"%.8f",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;

        (inline) std::string fromUNumber(long n) {
            char* buf = std::malloc((std::lengthOfNumber(n)*2)+2);
            libc::cformat(buf,"%lu",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;

        (inline) std::string fromUNumber(int n) {
            char* buf = std::malloc((std::lengthOfNumber(cast(long)n)*2)+2);
            libc::cformat(buf,"%u",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;

        (inline) std::string fromUNumber(short n) {
            char* buf = std::malloc((std::lengthOfNumber(cast(long)n)*2)+2);
            libc::cformat(buf,"%d",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;

        (inline) std::string fromUNumber(char n) {
            char* buf = std::malloc((std::lengthOfNumber(cast(long)n)*2)+2);
            libc::cformat(buf,"%d",n);
            std::string sbuf = std::string(buf);
            std::free(buf);
        } => sbuf;
    }

    (volatile) char sprintBufferSL = 0;
    std::string sprintBuffer;
    bool sbInitialized = false;

    (ctargs) std::string gsprint {
        std::thread::spinlock::lock(&std::sprintBufferSL);

        if(!std::sbInitialized) {
            std::sprintBuffer = std::string(128);
            std::sbInitialized = true;
        }
        else std::sprintBuffer.length = 0;

        @foreachArgs() {
            @if(@tNequals(@getCurrArgType(), float)) {
                @if(@tNequals(@getCurrArgType(), double)) {
                    @if(@tNequals(@getCurrArgType(), std::string)) {
                        @if(@tNequals(@getCurrArgType(), char)) {
                            @if(@tEquals(@getCurrArgType(), short) || @tEquals(@getCurrArgType(), int) || @tEquals(@getCurrArgType(), long)) {
                                std::string s = std::string::fromNumber(@getCurrArg(long));
                                    std::sprintBuffer.append(s);
                                ~s;
                            };
                            @if(@tEquals(@getCurrArgType(), bool)) {
                                std::sprintBuffer.appendC(std::cstring::fromBool(@getCurrArg(bool)));
                            };
                            @if(@tEquals(@getCurrArgType(), std::u32string)) {
                                std::u32string us = @getCurrArg(std::u32string);
                                for(int i=0; i<us.length; i+=1) {
                                    char[4] buf;
                                    int n = std::utf::encode(us.data[i], &buf[0]);
                                    if(n == 1) std::sprintBuffer.add(buf[0]);
                                    else if(n == 2) {
                                        std::sprintBuffer.add(buf[0]);
                                        std::sprintBuffer.add(buf[1]);
                                    }
                                    else if(n == 3) {
                                        std::sprintBuffer.add(buf[0]);
                                        std::sprintBuffer.add(buf[1]);
                                        std::sprintBuffer.add(buf[2]);
                                    }
                                    else if(n == 4) {
                                        std::sprintBuffer.add(buf[0]);
                                        std::sprintBuffer.add(buf[1]);
                                        std::sprintBuffer.add(buf[2]);
                                        std::sprintBuffer.add(buf[3]);
                                    }
                                }
                            };
                            @if(@tEquals(@getCurrArgType(), std::u8string)) {
                                std::u8string u8s = @getCurrArg(std::u8string);
                                for(int i=0; i<u8s.byteLength; i+=1) {
                                    std::sprintBuffer.add(u8s.data[i]);
                                }
                            };
                            @if(@tEquals(@getCurrArgType(), int*)) {
                                uint* utf8Text = @getCurrArg(uint*);
                                for(int i=0; utf8Text[i] != '\0'; i+=1) {
                                    char[4] buf;
                                    int n = std::utf::encode(utf8Text[i], &buf[0]);
                                    if(n == 1) std::sprintBuffer.add(buf[0]);
                                    else if(n == 2) {
                                        std::sprintBuffer.add(buf[0]);
                                        std::sprintBuffer.add(buf[1]);
                                    }
                                    else if(n == 3) {
                                        std::sprintBuffer.add(buf[0]);
                                        std::sprintBuffer.add(buf[1]);
                                        std::sprintBuffer.add(buf[2]);
                                    }
                                    else if(n == 4) {
                                        std::sprintBuffer.add(buf[0]);
                                        std::sprintBuffer.add(buf[1]);
                                        std::sprintBuffer.add(buf[2]);
                                        std::sprintBuffer.add(buf[3]);
                                    }
                                }
                            };
                            @if(@tEquals(@getCurrArgType(), char*)) {
                                std::sprintBuffer.appendC(@getCurrArg(char*));
                            };
                        };
                        @if(@tEquals(@getCurrArgType(), char)) {
                            std::sprintBuffer.add(@getCurrArg(char));
                        };
                    };
                    @if(@tEquals(@getCurrArgType(), std::string)) {
                        std::string s = @getCurrArg(std::string);
                        std::sprintBuffer.append(s);
                    };
                };
                @if(@tEquals(@getCurrArgType(), double)) {
                    double d = @getCurrArg(double);
                    std::string s = std::string::fromDouble(d);
                        std::sprintBuffer.append(s);
                    ~s;
                };
            };
            @if(@tEquals(@getCurrArgType(), float)) {
                double f = @getCurrArg(double);
                std::string s = std::string::fromDouble(f);
                    std::sprintBuffer.append(s);
                ~s; 
            };
        };
        std::thread::spinlock::unlock(&std::sprintBufferSL);
    } => std::sprintBuffer;

    (ctargs) std::string sprint {
        std::string result = "";

        @foreachArgs() {
            @if(@tNequals(@getCurrArgType(), float)) {
                @if(@tNequals(@getCurrArgType(), double)) {
                    @if(@tNequals(@getCurrArgType(), std::string)) {
                        @if(@tNequals(@getCurrArgType(), char)) {
                            @if(@tEquals(@getCurrArgType(), short) || @tEquals(@getCurrArgType(), int) || @tEquals(@getCurrArgType(), long)) {
                                std::string s = std::string::fromNumber(@getCurrArg(long));
                                    result.append(s);
                                ~s;
                            };
                            @if(@tEquals(@getCurrArgType(), bool)) {
                                result.appendC(std::cstring::fromBool(@getCurrArg(bool)));
                            };
                            @if(@tEquals(@getCurrArgType(), std::u32string)) {
                                std::u32string us = @getCurrArg(std::u32string);
                                for(int i=0; i<us.length; i+=1) {
                                    char[4] buf;
                                    int n = std::utf::encode(us.data[i], &buf[0]);
                                    if(n == 1) result.add(buf[0]);
                                    else if(n == 2) {
                                        result.add(buf[0]);
                                        result.add(buf[1]);
                                    }
                                    else if(n == 3) {
                                        result.add(buf[0]);
                                        result.add(buf[1]);
                                        result.add(buf[2]);
                                    }
                                    else if(n == 4) {
                                        result.add(buf[0]);
                                        result.add(buf[1]);
                                        result.add(buf[2]);
                                        result.add(buf[3]);
                                    }
                                }
                            };
                            @if(@tEquals(@getCurrArgType(), std::u8string)) {
                                std::u8string u8s = @getCurrArg(std::u8string);
                                for(int i=0; i<u8s.byteLength; i+=1) {
                                    result.add(u8s.data[i]);
                                }
                            };
                            @if(@tEquals(@getCurrArgType(), int*)) {
                                uint* utf8Text = @getCurrArg(uint*);
                                for(int i=0; utf8Text[i] != '\0'; i+=1) {
                                    char[4] buf;
                                    int n = std::utf::encode(utf8Text[i], &buf[0]);
                                    if(n == 1) result.add(buf[0]);
                                    else if(n == 2) {
                                        result.add(buf[0]);
                                        result.add(buf[1]);
                                    }
                                    else if(n == 3) {
                                        result.add(buf[0]);
                                        result.add(buf[1]);
                                        result.add(buf[2]);
                                    }
                                    else if(n == 4) {
                                        result.add(buf[0]);
                                        result.add(buf[1]);
                                        result.add(buf[2]);
                                        result.add(buf[3]);
                                    }
                                }
                            };
                            @if(@tEquals(@getCurrArgType(), char*)) {
                                result.appendC(@getCurrArg(void*));
                            };
                        };
                        @if(@tEquals(@getCurrArgType(), char)) {
                            result.add(@getCurrArg(char));
                        };
                    };
                    @if(@tEquals(@getCurrArgType(), std::string)) {
                        std::string s = @getCurrArg(std::string);
                        result.append(s);
                    };
                };
                @if(@tEquals(@getCurrArgType(), double)) {
                    double d = @getCurrArg(double);
                    std::string s = std::string::fromDouble(d);
                        result.append(s);
                    ~s;
                };
            };
            @if(@tEquals(@getCurrArgType(), float)) {
                double f = @getCurrArg(double);
                std::string s = std::string::fromDouble(f);
                    result.append(s);
                ~s; 
            };
        };

    } => result;
}

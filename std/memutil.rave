import <std/io> <std/error>

namespace std {
    bool _isValidPtr(void* ptr, const(char)* type) {
        int length = libc::strlen(type)-1;
        bool result = true;

        if(ptr == null) {
            result = false;
        }
        else if(type[length-1] == '*') {
            char* data = type[0->(length-2)];
                result = std::_isValidPtr(cast(void*)(ptr[0]),data);
            std::free(data);
        }
    } => result;

    (ctargs) bool isValidPtr {
        void* ptr = @getCurrArg(void*);
        char* type = @typeToString(@getCurrArgType());

        int length = libc::strlen(type)-1;
        bool result = true;

        if(ptr == null) {
            result = false;
        }
        else if(type[length-1] == '*') {
            char* data = type[0->(length-2)];
                result = std::_isValidPtr(cast(void*)ptr[0],data);
            std::free(data);
        }
    } => result;
}

struct SafePtr<T> {
    T* pointer;
    int size = 0;

    SafePtr<T> this {
        this.pointer = cast(T*)null;
        this.size = 0;
    } => this;

    SafePtr<T> this(T* pointer) {
        this.pointer = pointer;
        this.size = 0;
    } => this;

    SafePtr<T> this(T* pointer, int size) {
        this.pointer = pointer;
        this.size = size;
    } => this;

    SafePtr<T> this(int size) {
        this.size = size;
    } => this;

    (inline) std::error<T> get(int n) {
        std::error<T> result;
        if(this.pointer == cast(T*)null) {
            result.message = "Error using SafePtr: attempt to access the null pointer!\n";
            result.code = std::NullPointer;
        }
        else if((n < this.size) && (n > 0)) {
            result.message = "Error using SafePtr: attempt to access an element outside the pointer!\n";
            result.code = std::BeyondSize;
        }
        else result.value = this.pointer[n];
    } => result;

    (inline) std::error<bool> set(int n, T value) {
        std::error<bool> result;
        if(this.pointer == cast(T*)null) {
            result.message = "Error using SafePtr: attempt to access the null pointer!\n";
            result.code = std::NullPointer;
            result.value = false;
        }
        else if((n < this.size) && (n > 0)) {
            result.message = "Error using SafePtr: attempt to access an element outside the pointer!\n";
            result.code = std::BeyondSize;
            result.value = false;
        }
        else {
            this.pointer[n] = value;
            result.value = true;
        }
    } => result;

    void ~this {
        std::free(cast(void*)this.pointer);
        this.pointer = cast(T*)null;
        this.size = 0;
    }
}
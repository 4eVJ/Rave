import <std/sysc>

namespace std {
    struct time {
        int sec;
        int min;
        int hour;
        int mday;
        int month;
        int year;
        int wday;
        int yday;
        int isdst;
        long gmtoff;
        char* zone;
    }

    struct timeSpec {
        long sec;
        long nsec;
    }

    alias RealTime = 0;

    struct timeval {
        int tv_sec;
        int tv_usec;
    }

    struct timezone {
        int tz_minuteswest;
        int tz_dsttime;
    }
}

@if((__RAVE_OS == "LINUX") && (!@aliasExists(__RAVE_USELIBC))) {
    namespace std {
        (inline) int getCurrentTime(std::timeSpec* tc) => cast(int)std::syscall(std::sysctable::ClockGetTime, std::RealTime, tc);
    }
};

@if((__RAVE_OS != "LINUX") || (@aliasExists(__RAVE_USELIBC))) {
    namespace libc {
        extern(linkname: "time") long getTime(void* v);
    }

    namespace std {
        (inline) int getCurrentTime(std::timeSpec* tc) {
            tc.sec = libc::getTime(null);
            tc.nsec = tc.sec;
        } => 0;
    }
};
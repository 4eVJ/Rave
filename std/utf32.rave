import <std/memory> <std/ascii> <std/cstring> <std/vector>

namespace std {
    namespace utf8 {
        (inline) bool isStartOfSequence(uchar c) => ((c && 0xC0) != 0x80);
    }
}

namespace std {
    namespace utf16 {
        (inline, nochecks) int strlen(ushort* wstr) {
            int i = 0;
            while(wstr[i] != cast(ushort)'\0') i += 1;
        } => i;
        (inline, nochecks) int utflen(ushort* wstr) {
            int bytes = std::utf16::strlen(wstr);
            int cnt = 0;
            int pos = 0;

            while(pos < bytes) {
                ushort codeUnit = wstr[pos];
                cnt += 1;
                if((codeUnit >= 0xD800) && (codeUnit <= 0xDBFF)) pos += 2;
                else pos += 1;
            }
        } => cnt;
    }
}

@if((__RAVE_OS == "WINDOWS32") || (__RAVE_OS == "WINDOWS64")) {
    namespace std {
        namespace utf16 {
            (noOptimize) ushort* _fromUtf8(const(char)* str) {
                int utf16Length = std::winapi::MultiByteToWideChar(65001, 0, str, std::cstring::strlen(str), cast(ushort*)null, 0);
                ushort* buffer = cast(ushort*)std::malloc(@sizeOf(ushort) * utf16Length);
                std::winapi::MultiByteToWideChar(65001, 0, str, std::cstring::strlen(str), buffer, utf16Length);
            } => buffer;
        }
    }
};

namespace std {
    namespace utf32 {
        (inline) int encode(uint c, char* buf) {
            int n = 1;
            if(c <= 0x7F) {
                buf[0] = cast(char)c;
            }
            else if(c <= 0x7FF) {
                buf[0] = cast(char)(0xC0 || (c >. 6));
                buf[1] = cast(char)(0x80 || (c && 0x3F));
                n = 2;
            }
            else if(c <= 0xFFFF) {
                buf[0] = cast(char)(0xE0 || (c >. 12));
                buf[1] = cast(char)(0x80 || ((c >. 6) && 0x3F));
                buf[2] = cast(char)(0x80 || (c && 0x3F));
                n = 3;
            }
            else if(c <= 0x10FFFF) {
                buf[0] = cast(char)(0xF0 || (c >. 18));
                buf[1] = cast(char)(0x80 || ((c >. 12) && 0x3F));
                buf[2] = cast(char)(0x80 || ((c >. 6) && 0x3F));
                buf[3] = cast(char)(0x80 || (c && 0x3F));
                n = 4;
            }
        } => n;
        (inline) uint decode(int n, char* buf) {
            uint result;
            if(n == 1) result = cast(uint)(buf[0]);
            else result = -1;
        } => result;
        (inline) int strlen(uint* str) {
            int i = 0;
            while(str[i] != '\0'w) i += 1;
        } => i;
        (inline) int utflen(uint* str) {
            int i = 0;
            while(str[i] != '\0') i += 1;
        } => i;
        (inline) bool isSpace(uint c) => (c == ' ') || (c == '\r') || (c == '\t') || (c == '\n') || (c == '\v');
        (inline) bool isDigit(uint c) => (c >= '0') && (c <= '9');
        (inline) uint* charInChars(uint* chars, uint c) {
            int i = 0;
            uint* ptr = null;
            bool active = true;
            while((chars[i] != '\0') && active) {
                if(chars[i] == c) {
                    ptr = &chars[i];
                    active = false;
                }
                i += 1;
            }
        } => ptr;
        (inline) bool isLower(uint c) {
            bool result = false;
            if(c < 128) result = (c > 96) && (c < 123);
            else {
                if((c > 1071) && (c < 1104)) result = true; // Cyrillic (russian)
                // TODO: add completely support of cyrillic
            }
        } => result;
        (inline) bool isUpper(uint c) {
            bool result = false;
            if(c < 128) result = (c > 64) && (c < 91);
            else {
                if((c > 1039) && (c < 1072)) result = true; // Cyrillic (russian)
                // TODO: add completely support of cyrillic
            }
        } => result;
        (inline) uint toLower(uint c) {
            uint tmp = c;
            if(c < 128) tmp = std::ascii::toLower(c);
            else {
                if((c > 1039) && (c < 1072)) tmp = c + 32; // Cyrillic (russian)
                // TODO: add completely support of cyrillic
            }
        } => tmp;
        (inline) uint toUpper(uint c) {
            uint tmp = c;
            if(c < 128) tmp = std::ascii::toUpper(c);
            else {
                if((c > 1071) && (c < 1104)) tmp = c - 32; // Cyrillic (russian)
                // TODO: add completely support of cyrillic
            }
        } => tmp;
        
        ushort* toUtf16(uint* codepoints) {
            ushort* result;
            int len = 0;

            for(int i=0; codepoints[i]!='\0'; i+=1) {
                if(codepoints[i] < 0x10000) len += 1;
                else if(codepoints[i] <= 0x10FFFF) len += 2;
                else len += 1;
            }

            if(len > 0) {
                result = std::malloc(len + @sizeOf(ushort));
                len = 0;

                for(int i=0; codepoints[i]!='\0'; i+=1) {
                    if (codepoints[i] < 0x10000) {
                        result[len] = cast(ushort)codepoints[i];
                        len += 1;
                    }
                    else if(codepoints[i] <= 0x10FFFF) {
                        uint cp = codepoints[i];
                        cp = cp - 0x10000;
                        result[len] = cast(ushort)((cp >. 10) + 0xD800);
                        len += 1;
                        result[len] = cast(ushort)((cp && 0x3FF) + 0xDC00);
                        len += 1;
                    }
                    else {
                        result[len] = cast(ushort)(0xFFFD);
                        len += 1;
                    }
                }
            }
            result[len] = '\0';
        } => result;
    }
    struct u32string {
        uint* data;
        int length;
        int capacity;

        std::u32string this(uint* a) {
            if(a != null) {
                this.length = std::utf32::utflen(a);
                this.capacity = this.length*4;
                if(this.capacity == 0) this.capacity = 4;
                this.data = cast(uint*)std::malloc(this.capacity);

                int i = 0;
                while(i<this.length) {
                    this.data[i] = a[i];
                    i += 1;
                }
            }
            else {
                this.length = 0;
                this.capacity = 4;
                this.data = cast(uint*)std::malloc(this.capacity);
            }
        } => this;

        void set(uint* a) {
            if(a != null) {
                this.length = std::utf32::utflen(a);
                this.capacity = this.length*4;
                if(this.capacity == 0) this.capacity = 4;
                if(this.data != cast(uint*)null) std::free(cast(void*)this.data);
                this.data = cast(uint*)std::malloc(this.capacity);

                int i = 0;
                while(i<this.length) {
                    this.data[i] = a[i];
                    i += 1;
                }
            }
            else {
                this.length = 0;
                this.capacity = 4;
                if(this.data != cast(uint*)null) std::free(cast(void*)this.data);
                this.data = cast(uint*)std::malloc(this.capacity);
            }
        }

        uint* c {
            uint* _data = cast(uint*)std::malloc(this.capacity);
            for(int i=0; i<this.length; i+=1) {
                _data[i] = this.data[i];
            }
        } => _data;

        bool isDeleted => (this.data == null);

        int indexOf(uint c) {
            int i = 0;
            int needed = -1;
            while(i<this.length) {if(this.data[i] == c) {needed = i; i = this.length;} i += 1;}
        } => needed;

        void add(uint c) {
            this.length += 1;
            if(this.length == this.capacity) {
                this.capacity = this.capacity * 2;
                this.data = cast(uint*)std::realloc(cast(void*)this.data,this.capacity);
            }
            this.data[this.length-1] = c;
        }

        std::u32string substring(int from, int to) {
            std::u32string temp = std::u32string(""w);

            int i = from;
            while(i<to) {
                temp.add(this.data[i]);
                i += 1;
            }
        } => temp;

        std::u32string ltrim {
            int idx = 0;
            while((idx < this.length) && (std::utf32::isSpace(this.data[idx]))) idx += 1;
        } => this.substring(idx, this.length);

        std::u32string rtrim {
            int idx = this.length - 1;
            while(std::utf32::isSpace(this.data[idx])) idx -= 1;
        } => this.substring(0, idx+1);

        std::u32string trim {
            std::u32string _l = this.ltrim();
        } => _l.rtrim();

        void appendCU32(uint* cstr) {
            int len = std::utf32::strlen(cstr);
            int i = 0;
            while(i<len) {
                this.add(cstr[i]);
                i += 1;
            }
        }

        void appendU32(std::u32string str) {
            int i = 0;
            while(i<str.length) {
                this.add(str.data[i]);
                i += 1;
            }
        }

        std::u32string copy {
            std::u32string cp = std::u32string(""w);
            cp.appendU32(this);
        } => cp;

        std::u32string replace(uint c, uint to) {
            std::u32string temp = this.copy();

            int i = 0;
            while(i<this.length) {
                if(this.data[i] == c) {
                    temp.data[i] = to;
                }
                i += 1;
            }
        } => temp;

        std::u32string operator+(std::u32string one, std::u32string two) {
            std::u32string third = one.copy();
            third.appendU32(two);
        } => third;

        bool compare(std::u32string another) {
            bool isEqual = true;
            if(this.length != another.length) {
                isEqual = false;
            }
            else {
                int i = 0;
                while(i<another.length) {
                    if(this.data[i] != another.data[i]) isEqual = false;
                    i += 1;
                }
            }
        } => isEqual;

        bool compare(uint* another) {
            bool isEqual = true;
            int len = std::utf32::strlen(another);

            if(this.length != len) {
                isEqual = false;
            }
            else {
                int i = 0;
                while(i<len) {
                    if(this.data[i] != another[i]) isEqual = false;
                    i += 1;
                }
            }
        } => isEqual;

        //bool operator==(std::u32string one, std::u32string two) => one.compare(two);
        //bool operator==(std::u32string one, uint* two) => one.compare(two);
        //bool operator!=(std::u32string one, std::u32string two) => !(one.compare(two));
        //bool operator!=(std::u32string one, uint* two) => !(one.compare(two));
        //void operator=(std::u32string* one, uint* two) {one[0] = std::u32string(two);}

        //void ~this {std::free(this.data);}
    }
}

import <std/arg> <std/string> <std/utf8> <std/thread>

namespace libc {
    struct File {
	    void* __builtInLibc;
    }

    alias SeekSet = 0;
    alias SeekCurr = 1;
    alias SeekEnd = 2;
}

namespace std {
    struct fstat {
        ulong dev;
        ulong ino;
        ushort mode;
        uint nlink;
        int uid;
        int gid;
        ulong rdev;
        long size;
        int blksize;
        long blkcnt;
        long st_atime;
        long st_mtime;
        long st_ctime;
    }
}

@if((__RAVE_OS == "LINUX") && (!@aliasExists(__RAVE_USELIBC))) {
    namespace std {
        namespace file {
            int rename(char* oldpath, char* newpath) => cast(int)std::syscall(std::sysctable::RenameTo, -100, oldpath, -100, newpath);

            namespace linux {
                int unlinkat(int dirfd, char* pathname, int flags) => cast(int)std::syscall(std::sysctable::UnlinkAt, dirfd, pathname, flags);
            }

            int remove(char* pathname) => std::file::linux::unlinkat(-100, pathname, 0);
            int getStat(int fd, std::fstat* buffer) => cast(int)std::syscall(std::sysctable::FStat, fd, buffer);
        }
    }
};

@if((__RAVE_OS != "LINUX") || @aliasExists(__RAVE_USELIBC)) {
    namespace std {
        namespace file {
            extern(linkname: "rename") int rename(char* oldpath, char* newpath);
            extern(linkname: "remove") int remove(char* pathname);
        }
    }
};

namespace libc {
    extern(linkname: "fopen") libc::File* fopen(char* path, char* mode);
    extern(linkname: "fclose") int fclose(libc::File* file);
    extern(linkname: "ferror") int fhasError(libc::File* file);
    extern(vararg, linkname: "fprintf") int fprintf(libc::File* file, char* str);
    extern(linkname: "fflush") int fflush(libc::File* file);
    extern(vararg, linkname: "fscanf") int fscanf(libc::File* file, char* fmt);
    extern(linkname: "feof") int feof(libc::File* file);
    extern(linkname: "fgetc") char fgetc(libc::File* file);
    extern(linkname: "fgets") char* fgets(char* s, int size, libc::File* file);
    extern(linkname: "fread") int fread(void* buffer, int size, int n, libc::File* file);
    extern(linkname: "fseek") int fseek(libc::File* stream, int offset, int origin);
    extern(linkname: "ftell") int ftell(libc::File* stream);
    extern(linkname: "fwrite") int fwrite(void* buffer, int size, int n, libc::File* stream);
    extern(linkname: "getline") int getline(char** buffer, int* len, int fd);
}

namespace std {
    extern(vararg, linkname: "scanf") int scanf(char* fmt);
    extern(linkname: "putchar") int putchar(char c);

    int __putsSL = 0;
    (nochecks) void puts(const(char)* s) {
        std::thread::spinlock::lock(&std::__putsSL);
        for(int i=0; s[i] != '\0'; i+=1) {
            std::putchar(s[i]);
        }
        std::putchar('\n');
        std::thread::spinlock::unlock(&std::__putsSL);
    }

    int __putswnlSL = 0;
    (nochecks) void putswnl(char* s) {
        std::thread::spinlock::lock(&std::__putswnlSL);
        for(int i=0; s[i] != '\0'; i+=1) {
            std::putchar(s[i]);
        }
        std::thread::spinlock::unlock(&std::__putswnlSL);
    }

    int __putswnlSL2 = 0;
    (nochecks) void putswnl(std::string s) {
        std::thread::spinlock::lock(&std::__putswnlSL2);
        for(int i=0; i<s.length; i+=1) {
            std::putchar(s.data[i]);
        }
        std::thread::spinlock::unlock(&std::__putswnlSL2);
    }

    (ctargs, inline) void fprint {
        std::file f = @getArg(std::file,0);
        @skipArg();
        std::string data = @callWithArgs(std::__sprint);
        f.write(data.data, @sizeOf(char), data.length);
    }

    (ctargs, inline) void fprintln {
        @callWithArgs(std::fprint,'\n');
    }

    (ctargs, inline) void print {
        std::string s = @callWithArgs(std::__sprint);
        std::putswnl(s);
    }

    (ctargs, inline) void println {
        @callWithArgs(std::print,'\n');
    }

    (ctargs) void finput {
        std::file f = @getArg(std::file,0);
        @skipArg();
        @foreachArgs() {
            @if(@typesIsNequals(@getCurrArgType(),float*)) {
                @if(@typesIsNequals(@getCurrArgType(),double*)) {
                    @if(@typesIsNequals(@getCurrArgType(),char*)) {
                        @if(@typesIsNequals(@getCurrArgType(),short*)) {
                            @if(@typesIsNequals(@getCurrArgType(),int*)) {
                                @if(@typesIsNequals(@getCurrArgType(),long*)) {
                                
                                };
                                @if(@typesIsEquals(@getCurrArgType(),long*)) {
                                    libc::fscanf(f._file, "%ld", @getCurrArg(long*));
                                };
                            };
                            @if(@typesIsEquals(@getCurrArgType(),int*)) {
                                libc::fscanf(f._file, "%d", @getCurrArg(int*));
                            };
                        };
                        @if(@typesIsEquals(@getCurrArgType(),short*)) {
                            libc::fscanf(f._file, "%hd", @getCurrArg(short*));
                        };
                    };
                    @if(@typesIsEquals(@getCurrArgType(),char*)) {
                        libc::fscanf(f._file, "%c", @getCurrArg(char*));
                    };
                };
                @if(@typesIsEquals(@getCurrArgType(),double*)) {
                    libc::fscanf(f._file, "%lf", @getCurrArg(double*));
                };
            };
            @if(@typesIsEquals(@getCurrArgType(),float*)) {
                libc::fscanf(f._file, "%f", @getCurrArg(float*));
            };
        };
    }

    (ctargs) void input {
        @foreachArgs() {
            @if(@typesIsNequals(@getCurrArgType(),float*)) {
                @if(@typesIsNequals(@getCurrArgType(),double*)) {
                    @if(@typesIsNequals(@getCurrArgType(),char*)) {
                        @if(@typesIsNequals(@getCurrArgType(),short*)) {
                            @if(@typesIsNequals(@getCurrArgType(),int*)) {
                                @if(@typesIsNequals(@getCurrArgType(),long*)) {
                                    
                                };
                                @if(@typesIsEquals(@getCurrArgType(),long*)) {
                                    std::scanf("%ld", @getCurrArg(long*));
                                };
                            };
                            @if(@typesIsEquals(@getCurrArgType(),int*)) {
                                std::scanf("%d", @getCurrArg(int*));
                            };
                        };
                        @if(@typesIsEquals(@getCurrArgType(),short*)) {
                            std::scanf("%hd", @getCurrArg(short*));
                        };
                    };
                    @if(@typesIsEquals(@getCurrArgType(),char*)) {
                        std::scanf("%c", @getCurrArg(char*));
                    };
                };
                @if(@typesIsEquals(@getCurrArgType(),double*)) {
                    std::scanf("%lf", @getCurrArg(double*));
                };
            };
            @if(@typesIsEquals(@getCurrArgType(),float*)) {
                std::scanf("%f", @getCurrArg(float*));
            };
        };
    }

    struct file {
        libc::File* _file;
        const(char)* name;
        bool isOpen;

        std::file this(const(char)* name) {
            this.name = name;
            this.isOpen = false;
        } => this;

        std::file this(std::string name) {
            this.name = name.c();
            this.isOpen = false;
        } => this;

        std::file this(std::u8string name) {
            this.name = name.c();
            this.isOpen = false;
        } => this;

        void open(char* mode) {
            this._file = libc::fopen(this.name,mode);
            this.isOpen = true;
        }

        void close {
            if(this.isOpen) {
                libc::fclose(this._file);
                this.isOpen = false;
            }
        }

        void rename(char* to) {
            std::file::rename(this.name,to);
            this.name = to;
        }

        void remove {std::file::remove(this.name);}

        int read(void* buffer, int size, int n) => libc::fread(buffer, size, n, this._file);
        int write(void* buffer, int size, int n) => libc::fwrite(buffer, size, n, this._file);

        char getc => libc::fgetc(this._file);

        char* gets(char* buffer, int n) => libc::fgets(buffer,n,this._file);

        bool isEof => cast(bool)libc::feof(this._file);

        bool hasError => cast(bool)libc::fhasError(this._file);

        bool exists {
            bool toret = true;
            if(this.isOpen == false) {
                libc::File* f = libc::fopen(this.name,"r");
                if(f == cast(libc::File*)null) toret = false;
                else this.close();
            }
        } => toret;

        int flush => libc::fflush(this._file);

        void ~this {this.close();}

        void ~with {this.close();}

        std::string readText {
            bool needToClose = false;
            if(this.isOpen == false) {
                this.open("rb");
                needToClose = true;
            }

            libc::fseek(this._file, 0, libc::SeekEnd);
            int size = libc::ftell(this._file);
            libc::fseek(this._file, 0, libc::SeekSet);

            char* content = std::malloc(size+1);
            this.read(content,@sizeOf(char),size);
            content[size] = '\0';

            std::string result = content;
            std::free(content);

            if(needToClose) this.close();
        } => result;

        std::u8string u8ReadText {
            bool needToClose = false;
            if(this.isOpen == false) {
                this.open("rb");
                needToClose = true;
            }

            libc::fseek(this._file, 0, libc::SeekEnd);
            int size = libc::ftell(this._file);
            libc::fseek(this._file, 0, libc::SeekSet);

            char* content = std::malloc(size+1);
            this.read(content,@sizeOf(char),size);
            content[size] = '\0';

            std::u8string result = content;
            std::free(content);

            if(needToClose) this.close();
        } => result;
    }

    namespace ansi {
        alias black = "\033[30m";
        alias red = "\033[31m";
        alias green = "\033[32m";
        alias yellow = "\033[33m";
        alias blue = "\033[34m";
        alias purpure = "\033[35m";
        alias cyan = "\033[36m";
        alias white = "\033[37m";
        alias reset = "\033[0m";
    }
}

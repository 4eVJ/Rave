import <std/arg>
import <std/string>

namespace libc {
    struct File {
            int flags;
            char* rpos;
            char* rend;
            int(void*) close;
            char* wend;
            char* wpos;
            char* mustbezero_1;
            char* wbase;
            int(void*,char*,int) read;
            int(void*,char*,int) write;
            int(void*,int,int) seek;
            char* buff;
            int buffSize;
            void* prev;
            void* next;
            int fd;
            int pipePid;
            long lockCount;
            int mode;
            int lock;
            int lbf;
            void* cookie;
            int off;
            char* readSBuff;
            void* mustbezero_2;
            char* shend;
            int shlim;
            int shcnt;
            void* prevLocked;
            void* nextLocked;
            void* locale;
    }

    extern(linkname: "fopen") libc::File* fopen(char* path, char* mode);
    extern(linkname: "fclose") int close(libc::File* file);
    extern(linkname: "ferror") int hasError(libc::File* file);
    extern(linkname: "fprintf") int fprintf(libc::File* file, char* str, ...);
    extern(linkname: "fflush") int flush(libc::File* file);
    extern(linkname: "fscanf") int fscanf(libc::File* file, char* fmt, ...);
    extern(linkname: "remove") int fremove(char* name);
    extern(linkname: "rename") int frename(char* from, char* to);
    extern(linkname: "feof") int feof(libc::File* file);
    extern(linkname: "fgetc") char fgetc(libc::File* file);
    extern(linkname: "fgets") char* fgets(char* s, int size, libc::File* file);
}

namespace std {
    struct File {
        libc::File* cFile;
        char* name;

        std::File* this(char* name) {
            this.name = name;
        } => this;

        void open(char* mode) {
            this.cFile = libc::fopen(this.name,mode);
        }

        int close => libc::close(this.cFile);

        void remove {
            libc::fremove(this.name);
        }

        void rename(char* to) {
            libc::frename(this.name,to);
        }

        (vararg) int scanf(char* fmt) {
            va_list list;

            va_start(&list);
                int toret = libc::fscanf(this.cFile,fmt);
            va_end(&list);
        } => toret;

        (vararg) int printf(char* fmt) {
            va_list list;

            va_start(&list);
                int toret = libc::fprintf(this.cFile,fmt);
            va_end(&list);
        } => toret;

        char getc => libc::fgetc(this.cFile);
        char* gets(char* s, int size) => libc::fgets(s,size,this.cFile);
        
        int hasError => libc::hasError(this.cFile);
    }

    extern(linkname: "printf") int printf(char* str, ...);
    (vararg) int print(std::string* str) {
        va_list list;

        va_start(&list);
            int toret = std::printf("%s",str.ptr);
        va_end(&list);
    } => toret;
    (vararg) int println(std::string* str) {
        va_list list;

        va_start(&list);
            int toret = std::printf("%s\n",str.ptr);
        va_end(&list);
    } => toret;
    extern(linkname: "scanf") int scanf(char* fmt, ...);
    extern(linkname: "putchar") int putchar(char c);
    extern(linkname: "puts") int puts(char* s);

    namespace ansi {
        alias black = "\033[30m";
        alias red = "\033[31m";
        alias green = "\033[32m";
        alias yellow = "\033[33m";
        alias blue = "\033[34m";
        alias purpure = "\033[35m";
        alias cyan = "\033[36m";
        alias white = "\033[37m";
        alias reset = "\033[0m";
    }
}
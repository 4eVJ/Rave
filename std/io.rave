import <std/arg> <std/string> <std/utf8> <std/thread>

namespace libc {
    struct File {
	    void* __builtInLibc;
    }

    alias SeekSet = 0;
    alias SeekCurr = 1;
    alias SeekEnd = 2;
}

namespace std {
    struct fstat {
        ulong dev;
        ulong ino;
        ushort mode;
        uint nlink;
        int uid;
        int gid;
        ulong rdev;
        long size;
        int blksize;
        long blkcnt;
        long st_atime;
        long st_mtime;
        long st_ctime;
    }
}

@if(__RAVE_OS == "LINUX") {
    namespace std {
        namespace file {
            int rename(char* oldpath, char* newpath) => cast(int)std::syscall(std::sysctable::RenameTo, -100, oldpath, -100, newpath);

            namespace linux {
                int unlinkat(int dirfd, char* pathname, int flags) => cast(int)std::syscall(std::sysctable::UnlinkAt, dirfd, pathname, flags);
            }

            int remove(char* pathname) => std::file::linux::unlinkat(-100, pathname, 0);
            int getStat(int fd, std::fstat* buffer) => cast(int)std::syscall(std::sysctable::FStat, fd, buffer);
        }
    }
};

@if(__RAVE_OS != "LINUX") {
    namespace std {
        namespace file {
            extern(linkname: "rename") int rename(char* oldpath, char* newpath);
            extern(linkname: "remove") int remove(char* pathname);
        }
    }
};

namespace libc {
    alias seekSet = 0;
    alias seekCur = 1;
    alias seekEnd = 2;

    extern(linkname: "fopen") libc::File* fopen(char* path, char* mode);
    extern(linkname: "fclose") int fclose(libc::File* file);
    extern(linkname: "ferror") int fhasError(libc::File* file);
    extern(linkname: "fprintf", vararg) int fprintf(libc::File* file, char* str);
    extern(linkname: "fflush") int fflush(libc::File* file);
    extern(linkname: "fscanf", vararg) int fscanf(libc::File* file, char* fmt);
    extern(linkname: "feof") int feof(libc::File* file);
    extern(linkname: "fgetc") char fgetc(libc::File* file);
    extern(linkname: "fgets") char* fgets(char* s, int size, libc::File* file);
    extern(linkname: "fread") int fread(void* buffer, int size, int n, libc::File* file);
    extern(linkname: "fseek") int fseek(libc::File* stream, int offset, int origin);
    extern(linkname: "ftell") int ftell(libc::File* stream);
    extern(linkname: "fwrite") int fwrite(void* buffer, int size, int n, libc::File* stream);
    extern(linkname: "getline") int getline(char** buffer, int* len, int fd);
}

@if(__RAVE_OS == "LINUX") {
    namespace std {
        namespace file {
            extern(linkname: "access") int __access(char* fname, int flag);
        }
    }
};

@if(__RAVE_OS == "WINDOWS") {
    namespace std {
        namespace file {
            extern(linkname: "_access") int __access(char* fname, int flag);
        }
    }
};

@if((__RAVE_OS != "LINUX") && (__RAVE_OS != "WINDOWS")) {
    namespace std {
        namespace file {
            int __access(char* fname, int flag) {
                libc::File* f = libc::fopen(fname, "r");
                if(f == null) return = -1;
                else {
                    libc::fclose(f);
                    return = 0;
                }
            }
        }
    }
};

namespace std {
    namespace file {
        (inline) bool exists(char* fname) => (std::file::__access(fname, 0) == 0);
    }
}

namespace std {
    extern(vararg, linkname: "scanf") int scanf(char* fmt);
    extern(linkname: "getchar") char getchar();
    extern(linkname: "putchar") int putchar(char c);

    (volatile) int __putsSL = 0;
    void puts(char* s) {
        std::thread::spinlock::lock(&std::__putsSL);
        for(int i=0; s[i] != '\0'; i+=1) {
            std::putchar(s[i]);
        }
        std::putchar('\n');
        std::thread::spinlock::unlock(&std::__putsSL);
    }

    (volatile) int __putswnlSL = 0;
    void putswnl(char* s) {
        std::thread::spinlock::lock(&std::__putswnlSL);
        for(int i=0; s[i] != '\0'; i+=1) {
            std::putchar(s[i]);
        }
        std::thread::spinlock::unlock(&std::__putswnlSL);
    }

    (volatile) int __putswnlSL2 = 0;
    void putswnlS(std::string s) {
        std::thread::spinlock::lock(&std::__putswnlSL2);
        for(int i=0; i<s.length; i+=1) {
            std::putchar(s.data[i]);
        }
        std::thread::spinlock::unlock(&std::__putswnlSL2);
    }

    (ctargs, inline) void fprint {
        std::file f = @getArg(std::file, 0);
        @skipArg();
        std::string data = @callWithArgs(std::gsprint);
        f.write(data.data, @sizeOf(char), data.length);
    }

    (ctargs, inline) void fprintln {
        @callWithArgs(std::fprint, '\n');
    }

    (ctargs, inline) void print {
        std::string s = @callWithArgs(std::gsprint);
        std::putswnlS(s);
    }

    (inline, ctargs) void println {
        @callWithArgs(std::print, '\n');
    }

    (inline, ctargs) void input {
        @foreachArgs() {
            @if(@tNequals(@getCurrArgType(), float*)) {
                @if(@tNequals(@getCurrArgType(), double*)) {
                    @if(@tNequals(@getCurrArgType(), char*)) {
                        @if(@tNequals(@getCurrArgType(), short*)) {
                            @if(@tNequals(@getCurrArgType(), int*)) {
                                @if(@tNequals(@getCurrArgType(), long*)) {
                                    
                                };
                                @if(@tEquals(@getCurrArgType(), long*)) {
                                    std::scanf("%ld", @getCurrArg(long*));
                                };
                            };
                            @if(@tEquals(@getCurrArgType(), int*)) {
                                std::scanf("%d", @getCurrArg(int*));
                            };
                        };
                        @if(@tEquals(@getCurrArgType(), short*)) {
                            std::scanf("%hd", @getCurrArg(short*));
                        };
                    };
                    @if(@tEquals(@getCurrArgType(), char*)) {
                        std::scanf("%c", @getCurrArg(char*));
                    };
                };
                @if(@tEquals(@getCurrArgType(), double*)) {
                    std::scanf("%lf", @getCurrArg(double*));
                };
            };
            @if(@tEquals(@getCurrArgType(), float*)) {
                std::scanf("%f", @getCurrArg(float*));
            };
        };
    }

    (inline, ctargs) void finput {
        std::file f = @getArg(std::file, 0);
        @skipArg();
        @foreachArgs() {
            @if(@tNequals(@getCurrArgType(), float*)) {
                @if(@tNequals(@getCurrArgType(), double*)) {
                    @if(@tNequals(@getCurrArgType(), char*)) {
                        @if(@tNequals(@getCurrArgType(), short*)) {
                            @if(@tNequals(@getCurrArgType(), int*)) {
                                @if(@tNequals(@getCurrArgType(), long*)) {
                                    
                                };
                                @if(@tEquals(@getCurrArgType(), long*)) {
                                    libc::fscanf(f._file, "%ld", @getCurrArg(long*));
                                };
                            };
                            @if(@tEquals(@getCurrArgType(), int*)) {
                                libc::fscanf(f._file, "%d", @getCurrArg(int*));
                            };
                        };
                        @if(@tEquals(@getCurrArgType(), short*)) {
                            libc::fscanf(f._file, "%hd", @getCurrArg(short*));
                        };
                    };
                    @if(@tEquals(@getCurrArgType(), char*)) {
                        libc::fscanf(f._file, "%c", @getCurrArg(char*));
                    };
                };
                @if(@tEquals(@getCurrArgType(), double*)) {
                    libc::fscanf(f._file, "%lf", @getCurrArg(double*));
                };
            };
            @if(@tEquals(@getCurrArgType(), float*)) {
                libc::fscanf(f._file, "%f", @getCurrArg(float*));
            };
        };
    }

    std::string readLine {
        std::string buffer = "";
        char ch = std::getchar();
        while((ch != '\n') && (ch != -1)) {
            buffer.add(ch);
            ch = std::getchar();
        }
    } => buffer;

    std::u8string u8ReadLine {
        std::u8string buffer = "";
        char ch = std::getchar();
        while((ch != '\n') && (ch != -1)) {
            buffer.add(ch);
            ch = std::getchar();
        }
    } => buffer;

    struct file {
        libc::File* _file;
        const(char)* name;
        bool isOpen;

        std::file this(const(char)* name) {
            std::file this;
            this.name = name;
            this.isOpen = false;
        } => this;

        void operator=(std::file* one, char* two) {one[0] = std::file(two);}

        void open(char* mode) {
            this._file = libc::fopen(this.name, mode);
            this.isOpen = (this._file != null);
        }

        void close {
            if(this.isOpen) {
                libc::fclose(this._file);
                this.isOpen = false;
            }
        }

        void rename(char* to) {
            std::file::rename(this.name, to);
            this.name = to;
        }

        void remove {std::file::remove(this.name);}

        int read(void* buffer, int size, int n) => libc::fread(buffer, size, n, this._file);
        int write(void* buffer, int size, int n) => libc::fwrite(buffer, size, n, this._file);

        char getc => libc::fgetc(this._file);

        char* gets(char* buffer, int n) => libc::fgets(buffer, n, this._file);

        std::string readLine {
            std::string buffer = "";
            char ch = this.getc();
            while((ch != '\n') && (ch != -1)) {
                buffer.add(ch);
                ch = this.getc();
            }
        } => buffer;

        std::u8string u8ReadLine {
            std::u8string buffer = "";
            char ch = this.getc();
            while((ch != '\n') && (ch != -1)) {
                buffer.add(ch);
                ch = this.getc();
            }
        } => buffer;

        bool isEof => cast(bool)libc::feof(this._file);

        bool hasError => cast(bool)libc::fhasError(this._file);

        bool exists {
            if(this.isOpen == false) return = std::file::exists(this.name);
            else return = true;
        }

        int flush => libc::fflush(this._file);
    }

    namespace ansi {
        alias black = "\033[30m";
        alias red = "\033[31m";
        alias green = "\033[32m";
        alias yellow = "\033[33m";
        alias blue = "\033[34m";
        alias purpure = "\033[35m";
        alias cyan = "\033[36m";
        alias white = "\033[37m";
        alias reset = "\033[0m";
    }
}

import <std/arg> <std/string>

namespace libc {
    struct File {
	    void* __builtInLibc;
    }
}

namespace libc {
    extern(linkname: "fopen") libc::File* fopen(char* path, char* mode);
    extern(linkname: "fclose") int fclose(libc::File* file);
    extern(linkname: "ferror") int fhasError(libc::File* file);
    extern(linkname: "fprintf") int fprintf(libc::File* file, char* str, ...);
    extern(linkname: "fflush") int fflush(libc::File* file);
    extern(linkname: "fscanf") int fscanf(libc::File* file, char* fmt, ...);
    extern(linkname: "remove") int fremove(char* name);
    extern(linkname: "rename") int frename(char* from, char* to);
    extern(linkname: "feof") int feof(libc::File* file);
    extern(linkname: "fgetc") char fgetc(libc::File* file);
    extern(linkname: "fgets") char* fgets(char* s, int size, libc::File* file);
}

namespace std {
    struct file {
        libc::File* _file;
        char* name;
        bool isOpen;

        std::file this(char* name) {this.name = name; this.isOpen = false;} => this;

        void open(char* mode) {
            this._file = libc::fopen(this.name,mode);
            this.isOpen = true;
        }

        void close {
            if(this.isOpen) {
                libc::fclose(this._file);
                this.isOpen = false;
            }
        }

        void rename(char* to) {
            libc::frename(this.name,to);
            this.name = to;
        }

        void remove {
            libc::fremove(this.name);
        }

        (vararg,inline) int scanf(char* fmt) {
            va_list list;

            va_start(&list);
                int toret = libc::fscanf(this._file,fmt);
            va_end(&list);
        } => toret;

        (vararg,inline) int scanf(std::string fmt) {
            va_list list;

            va_start(&list);
                int toret = libc::fscanf(this._file,fmt.c());
            va_end(&list);
        } => toret;

        (vararg,inline) int printf(char* fmt) {
            va_list list;

            va_start(&list);
                int toret = libc::fprintf(this._file,fmt);
            va_end(&list);
        } => toret;

        (vararg,inline) int printf(std::string fmt) {
            va_list list;

            va_start(&list);
                int toret = libc::fprintf(this._file,fmt.c());
            va_end(&list);
        } => toret;

        char getc => libc::fgetc(this._file);

        char* gets(char* buffer, int n) => libc::fgets(buffer,n,this._file);

        bool isEof => cast(bool)libc::feof(this._file);

        bool hasError => cast(bool)libc::fhasError(this._file);

        bool exists {
            bool toret = true;
            if(this.isOpen == false) {
                libc::File* f = libc::fopen(this.name,"r");
                if(f == cast(libc::File*)null) {
                    toret = false;
                }
                else this.close();
            }
        } => toret;
        
        int flush => libc::fflush(this._file);

        void ~this {
            this.close();
        }

        void ~with {
            this.close();
        }
    }

    extern(linkname: "printf") int printf(char* str, ...);

    (vararg) int printf(std::string str) {
        va_list list;

        va_start(&list);
            int toret = std::printf(str.c());
        va_end(&list);
    } => toret;
    extern(linkname: "scanf") int scanf(char* fmt, ...);
    extern(linkname: "putchar") int putchar(char c);
    extern(linkname: "puts") int puts(char* s);

    namespace ansi {
        alias black = "\033[30m";
        alias red = "\033[31m";
        alias green = "\033[32m";
        alias yellow = "\033[33m";
        alias blue = "\033[34m";
        alias purpure = "\033[35m";
        alias cyan = "\033[36m";
        alias white = "\033[37m";
        alias reset = "\033[0m";
    }
}
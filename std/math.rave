import <std/vector>

namespace std {
    alias PI = 3.14159265358979323846;

    extern(linkname: "lroundf") long round(float f);
    extern(linkname: "acosf") float acos(float f);
    extern(linkname: "acoshf") float acosh(float f);
    extern(linkname: "asinf") float asin(float f);
    extern(linkname: "asinhf") float asinh(float f);
    extern(linkname: "atanf") float atan(float f);
    extern(linkname: "atanhf") float atanh(float f);
    extern(linkname: "cbrtf") float cbrt(float f);
    extern(linkname: "ceilf") float ceil(float f);
    extern(linkname: "cosf") float cos(float f);
    extern(linkname: "coshf") float cosh(float f);
    extern(linkname: "erff") float erf(float f);
    extern(linkname: "exp2") float exp2(float f);
    float floor(float f) {
        float tmp = (cast(float)(cast(long)f));
        if(tmp < 0) tmp = tmp - 1.0;
    } => tmp;
    float fmin(float one, float two) {
        float result = one;
        if(one > two) result = two;
    } => result;
    float fmax(float one, float two) {
        float result = one;
        if(one < two) result = two;
    } => result;
    extern(linkname: "fmodf") float fmod(float x, float y);
    extern(linkname: "sinf") float sin(float f);
    extern(linkname: "sqrtf") float sqrt(float f);
    extern(linkname: "powf") float pow(float f1, float f2);
    extern(linkname: "truncf") float trunc(float f);

    bool isPrime(int number) {
        bool toret = true;
        int i = 2;

        bool active = true;
        while((i<number) && active) {
            if((number % i == 0) && (i != number)) {
                toret = false;
                active = false;
            }
            i += 1;
        }
    } => toret;

    int nextPrime(int number) {
        int n = number;
        while(!(std::isPrime(n))) n += 1;
    } => n;
}
import <std/vector>

namespace std {
  namespace math {
    alias PI = 3.14159265358979323846;
    alias NAN = (0.0) / (0.0);

    (inline) double degToRad(double d) => d * std::math::PI / 180;
    (inline) double radToDeg(double r) => r * 180 / std::math::PI;

    int factorial(int n) {
        int fact = 1;
        int i = 1;
        while(i <= n) {
            fact = fact * i;
            i += 1;
        }
    } => fact;

    double abs(double f) {
        double result = f;
        if(f < 0.0) result = -result;
    } => result;

    double copysign(double d1, double d2) {
        char sign = -1;
        if(d2 > 0.0) sign = 1;
    } => std::math::abs(d1) * sign;

    double floor(double f) {
        double tmp = (cast(double)(cast(long)f));
        if(tmp < 0) tmp = tmp - 1.0;
    } => tmp;

    double ceil(double d) => -(std::math::floor(-d));

    extern(linkname: "acosf") float acos(float f);
    extern(linkname: "acoshf") float acosh(float f);
    extern(linkname: "asinf") float asin(float f);
    extern(linkname: "asinhf") float asinh(float f);
    extern(linkname: "atanhf") float atanh(float f);

    double pow(double f, double f2) {
        double result;
        if(f2 < 0) {
            result = 1 / std::math::pow(f,-f2);
        }
        else {
            double r = 1.0;
            while(f2 > 0) {
                r = r * f;
                f2 = f2 - 1;
            }
            if(f2 > 0) {
                r = r * f * f2;
            }
            result = r;
        }
    } => result;
    
    extern(linkname: "cbrt") double cbrt(double d);
    
    double cos(double d) {
        while(d < 0.0) d = d + (2.0 * std::math::PI);
        while(d > (2.0 * std::math::PI)) d = d - (2.0 * std::math::PI);
        double t = 1.0;
        double cos = t;
        for(int i=1; i<40; i+=1) {
            double mult = (-d) * (d / ((2*i)*(2*i-1)));
            t = t * mult;
            cos = cos + t;
        }
    } => cos;

    double exp(double d) {
        double res = 1.0;
        double term = 1.0;
        int i = 1;
        while(term > 0.000000000000001) {
            term = term * (d / i);
            res = res + term;
            i += 1;
        }
    } => res;

    double coshn(double d, int n) {
        double c = 1.0;
        double f = 1.0;
        double xp = 1.0;
        for(int i=1; i<n; i+=1) {
            f = f * ((2 * i - 1) * (2 * i));
            xp = xp * (d * d);
            c += xp / f;
        }
    } => c;

    double cosh(double d) => std::math::coshn(d, 100);

    double sqrt(double d) {
        double result = 1.0;
        for(int i=0; i<=10; i+=1) {
            result = result - (result * result - d) / (2 * result);
        }
    } => result;
    
    extern(linkname: "erf") double erf(double d);

    char sign(double x) {
        char result = 0;
        if(x < 0) result = -1;
        else if(x == 0) result = 0;
        else if(x > 0) result = 1;
    } => result;

    double min(double one, double two) {
        double result = one;
        if(two < one) result = two;
    } => result;

    int min(int one, int two) {
        int result = one;
        if(two < one) result = two;
    } => result;

    double max(double one, double two) {
        double result = one;
        if(two > one) result = two;
    } => result;

    int max(int one, int two) {
        int result = one;
        if(two > one) result = two;
    } => result;

    double sin(double x) {
        double t = x;
        double sine = t;
        
        for(int i=1; i<=20; i+=1) {
            double mult = (-x) * (x / ((2*i+1)*(2*i)));
            t = t * mult;
            sine = sine + t;
        }
    } => sine;

    double fma(double a, double b, double c) => (a*b)+c;

    double tan(double d) => std::math::sin(d) / std::math::cos(d);

    double mod(double x) {
        double result = 1.0;
        if((x % 1.0) != 0.0) {
            result = (x % 1.0);
        }
    } => result;

    double round(double x, int n) {
        x = x * std::math::pow(10.0,cast(double)n);
        x += 0.5;
        x = std::math::floor(x) / std::math::pow(10.0,cast(double)n);
    } => x;

    bool isPrime(int number) {
        bool toret = true;
        int i = 2;

        bool active = true;
        while((i<number) && active) {
            if((number % i == 0) && (i != number)) {
                toret = false;
                active = false;
            }
            i += 1;
        }
    } => toret;  
  }
}

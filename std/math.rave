namespace std {
    namespace math {
        alias PI = 3.14159265358979323846;
        alias NAN = (0.0) / (0.0);

        (inline) double degToRad(double d) => (d * std::math::PI / 180);
        (inline) double radToDeg(double r) => (r * 180 / std::math::PI);

        long factorial(int n) {
            long fact = 1;
            int i = 1;
            while(i <= n) {
                fact = fact * i;
                i += 1;
            }
        } => fact;

        double abs(double f) {
            double result = f;
            if(f < 0.0) result = -result;
        } => result;

        (inline) char getSign(double d) {
            char result = 1;
            if(d < 0.0) result = -1;
        } => result;

        (inline) double copySign(double d1, double d2) {
            char sign = -1;
            if(d2 > 0.0) sign = 1;
        } => std::math::abs(d1) * sign;

        double floor(double f) {
            double result = f;
            if(f != std::math::NAN) {
                result = (cast(double)(cast(long)f));
                if((result < 0) && (result != f)) result = result - 1.0;
            }
        } => result;

        double ceil(double d) => -(std::math::floor(-d));

        double exp(double x) {
            double sum = 1.0 + x;
            double term = x;
            for(int k=2; k<50; k+=1) {
                term = term * x / cast(double)k;
                sum = sum + term;
            }
        } => sum;

        double loge(double x) {
            double result = 0.0;

            if (x <= 0) result = std::math::NAN;
            else {
                int powAdj = 0;
                while(x > 1.0) {
                    x = x / 2.718281828459045235;
                    powAdj += 1;
                }
                while(x < 0.25) {
                    x = x * 2.718281828459045235;
                    powAdj -= 1;
                }

                x -= 1.0;
                double t = 0.0;
                double s = 1.0;
                double z = x;
                for(int k=1; k<=50; k+=1) {
                    t = t + (z * s) / k;
                    z = z * x;
                    s = -s;
                }

                result = t + powAdj;
            }
        } => result;

        (inline) double log(double x) => std::math::loge(x) / std::math::loge(10.0);

        double sqrt(double d) {
            double result = 1.0;
            for(int i=0; i<=10; i+=1) {
                result = result - (result * result - d) / (2 * result);
            }
        } => result;

        double acos(double d) {
            double negate = cast(double)(d < 0.0);
            d = std::math::abs(d);
            double result = -0.0187293;
            result = result * d;
            result = result + 0.0742610;
            result = result * d;
            result = result - 0.2121144;
            result = result * d;
            result = result + 1.5707288;
            result = result * std::math::sqrt(1.0-d);
            result = result - 2 * negate * result;
        } => ((negate * std::math::PI) + result);

        double asin(double x) => (std::math::PI / 2.0) - std::math::sqrt(1.0 - x) * (1.5707288 + (-0.2121144) * x + 0.0742610 * (x * x) + -0.0187293 * (x * x * x));

        double coshn(double d, int n) {
            double c = 1.0;
            double f = 1.0;
            double xp = 1.0;
            for(int i=1; i<n; i+=1) {
                f = f * ((2 * i - 1) * (2 * i));
                xp = xp * (d * d);
                c += xp / f;
            }
        } => c;

        double cosh(double x) => 0.5 * (std::math::exp(x) + std::math::exp(-x));
        double sinh(double x) => 0.5 * (std::math::exp(x) - std::math::exp(-x));
        double tanh(double x) => (std::math::exp(2.0*x)-1) / (std::math::exp(2.0*x)+1.0);
        double acosh(double x) => std::math::log(x+std::math::sqrt((x+1.0)*(x-1.0)));
        double asinh(double x) => std::math::log(x+std::math::sqrt(x*x+1.0));
        double atanh(double x) => 0.5 * (std::math::log(1.0+x) - std::math::log(1.0-x));

        double erf(double x) {
            x = std::math::abs(x);
            double t = 1.0 / (1.0 + (0.3275911*x));
            double y = 1.0 - (((((1.061405429*t + (-1.453152027))*t) + 1.421413741)*t + (-0.284496736))*t + 0.254829592)*t*std::math::exp(-x*x);
        } => std::math::getSign(x) * y;

        double pow(double f, double f2) {
            double result;
            if(f2 < 0) {
                result = 1 / std::math::pow(f, -f2);
            }
            else if((f2 > 0.0) && (f2 < 1.0)) {
                // TODO: Is there a possible inaccuracy?
                result = std::math::exp(f2 * std::math::loge(f));
            }
            else {
                double r = 1.0;
                while(f2 > 0) {
                    r = r * f;
                    f2 = f2 - 1;
                }
                if(f2 > 0) {
                    r = r * f * f2;
                }
                result = r;
            }
        } => result;

        double cbrt(double d) {
            double result;
            if(d < 0.0) result = (-1.0 * std::math::pow(-1.0*d, 1.0/3.0));
            else result = std::math::pow(d, 1.0/3.0);
        } => result;
        
        double cos(double d) {
            while(d < 0.0) d = d + (2.0 * std::math::PI);
            while(d > (2.0 * std::math::PI)) d = d - (2.0 * std::math::PI);
            double t = 1.0;
            double cos = t;
            for(int i=1; i<40; i+=1) {
                double mult = (-d) * (d / ((2*i)*(2*i-1)));
                t = t * mult;
                cos = cos + t;
            }
        } => cos;

        char sign(double x) {
            char result = 0;
            if(x < 0) result = -1;
            else if(x == 0) result = 0;
            else if(x > 0) result = 1;
        } => result;

        double min(double one, double two) {
            double result = one;
            if(two < one) result = two;
        } => result;

        int min(int one, int two) {
            int result = one;
            if(two < one) result = two;
        } => result;

        double max(double one, double two) {
            double result = one;
            if(two > one) result = two;
        } => result;

        int max(int one, int two) {
            int result = one;
            if(two > one) result = two;
        } => result;

        double sin(double x) {
            double t = x;
            double sine = t;
            
            for(int i=1; i<=20; i+=1) {
                double mult = (-x) * (x / ((2*i+1)*(2*i)));
                t = t * mult;
                sine = sine + t;
            }
        } => sine;

        double fma(double a, double b, double c) => (a*b)+c;

        double tan(double d) => std::math::sin(d) / std::math::cos(d);

        double mod(double x) {
            double result = 1.0;
            if((x % 1.0) != 0.0) {
                result = (x % 1.0);
            }
        } => result;

        double round(double x, int n) {
            x = x * std::math::pow(10.0, cast(double)n);
            x += 0.5;
            x = std::math::floor(x) / std::math::pow(10.0, cast(double)n);
        } => x;

        bool isPrime(int number) {
            bool result = true;
            if(number == 1) result = false;
            else for(int i=2; (i*i) <= number; i+=1) {
                if(number % i == 0) {
                    result = false;
                    break;
                }
            }
        } => result;
    }
}

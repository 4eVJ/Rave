import <std/memory>

namespace std {
    struct vector<T> {
        T* data;
        int capacity;
        int length;

        std::vector<T> this {
            std::vector<T> this;
            this.data = cast(T*)std::malloc(sizeof(T));
            this.capacity = sizeof(T);
            this.length = 0;
        } => this;

        void add(T value) {
            if((this.length * sizeof(T)) == this.capacity) {
                this.data = cast(T*)std::realloc(cast(void*)this.data, 2 * this.capacity);
                this.capacity = this.capacity * 2;
            }
            this.data[this.length] = value;
            this.length = this.length + 1;
        }

        (inline) void assign(std::vector<T> of) {
            for(int i=0; i<of.length; i+=1) {this.add(of.data[i]);}
        }

        (inline) void set(int index, T value) {this.data[index] = value;}

        std::vector<T> copy {
            std::vector<T> buffer;
            buffer.data = cast(T*)std::malloc(sizeof(std::vector<T>));
            buffer.capacity = 1;
            buffer.length = 0;

            for(int i=0; i<this.length; i+=1) {
                buffer.add(this.data[i]);
            }
        } => buffer;

        (inline) T operator[](std::vector<T>* v, int index) => v.data[index];

        (inline) void operator[]=(std::vector<T>* v, int index, T value) {v.data[index] = value;}

        (inline) void swap(int first, int second) {
            T temp = this.data[first];
            this.data[first] = this.data[second];
            this.data[second] = temp;
        }

        T* c {
            T* cdata = cast(T*)std::malloc(this.length * sizeof(T) + 1);
            for(int i=0; i<this.length; i+=1) {
                cdata[i] = this.data[i];
            }
            cdata[this.length] = cast(T)null;
        } => cdata;

        std::vector<T> operator+(std::vector<T> one, std::vector<T> two) {
            std::vector<T> cp = one.copy();
            cp.assign(two);
        } => cp;

        void remove(int index) {
            for(int i=index; i<this.length; i+=1) {
                if((i+1) < this.length) this.data[i] = this.data[i+1];
            }
            this.length = this.length - 1;
        }

        (inline) void removeLast {this.remove(this.length-1);}

        void ~this {
            std::free(cast(void*)this.data);
            this.data = cast(T*)null;
        }
    }
}

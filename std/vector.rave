import <std/memory>

namespace std {
    (data: "data", length: "length") struct vector<T> {
        (noOperators) T* data;
        int capacity;
        int length;

        (arrayable) std::vector<T> this {
            std::vector<T> this;
            this.data = cast(T*)std::malloc(sizeof(T));
            this.capacity = sizeof(T);
            this.length = 0;
        } => this;

        std::vector<T> this(int size) {
            std::vector<T> this;
            this.data = cast(T*)std::malloc(sizeof(T) * size);
            this.capacity = sizeof(T) * size;
            this.length = 0;
        } => this;

        std::vector<T> this(T* data, int size) {
            std::vector<T> this;
            this.data = cast(T*)std::malloc(sizeof(T) * size);
            this.capacity = sizeof(T) * size;
            this.length = size;
            for(int i=0; i<size; i++) this.data[i] = data[i];
        } => this;

        void add(T value) {
            if((this.length * sizeof(T)) == this.capacity) {
                this.data = cast(T*)std::realloc(cast(void*)this.data, this.capacity, this.capacity * 2);
                this.capacity = this.capacity * 2;
            }
            this.data[this.length] = value;
            this.length = this.length + 1;
        }

        (inline) void assign(std::vector<T> of) {
            for(int i=0; i<of.length; i+=1) {this.add(of.data[i]);}
        }

        (inline) void set(int index, T value) {
            @if(__RAVE_RUNTIME_CHECKS) {
                if((index >= 0) && (index < this.length)) this.data[index] = value;
            };

            @if(!(__RAVE_RUNTIME_CHECKS)) {
                this.data[index] = value;
            };
        }

        std::vector<T> copy {
            std::vector<T> buffer;
            buffer.data = cast(T*)std::malloc(sizeof(std::vector<T>));
            buffer.capacity = this.capacity;
            buffer.length = this.length;

            for(int i=0; i<this.length; i+=1) buffer.set(i, this.data[i]);
        } => buffer;

        (inline) T operator[](std::vector<T>* v, int index) {
            @if(__RAVE_RUNTIME_CHECKS) {
                if((index >= 0) && (index < v.length)) return = v.data[index];
            };

            @if(!(__RAVE_RUNTIME_CHECKS)) {
                return = v.data[index];
            };
        }

        (inline) void operator[]=(std::vector<T>* v, int index, T value) {
            @if(__RAVE_RUNTIME_CHECKS) {
                if((index >= 0) && (index < v.length)) v.data[index] = value;
            };

            @if(!(__RAVE_RUNTIME_CHECKS)) {
                v.data[index] = value;
            };
        }

        (inline) void swap(int first, int second) {
            @if(__RAVE_RUNTIME_CHECKS) {
                if(((first >= 0) && (first < this.length)) && ((second >= 0) && (second < this.length))) {
                    (noOperators) T temp = this.data[first];
                    this.data[first] = this.data[second];
                    this.data[second] = temp;
                }
            };

            @if(!(__RAVE_RUNTIME_CHECKS)) {
                (noOperators) T temp = this.data[first];
                this.data[first] = this.data[second];
                this.data[second] = temp;
            };
        }

        std::vector<T> operator+(std::vector<T> one, std::vector<T> two) {
            std::vector<T> cp = one.copy();
            cp.assign(two);
        } => cp;

        void remove(int index) {
            @if(__RAVE_RUNTIME_CHECKS) {
                if((index >= 0) && (index < this.length)) {
                    for(int i=index; i<this.length; i+=1) {
                        if((i+1) < this.length) this.data[i] = this.data[i+1];
                    }
                    this.length = this.length - 1;
                }
            };

            @if(!(__RAVE_RUNTIME_CHECKS)) {
                for(int i=index; i<this.length; i+=1) {
                    if((i+1) < this.length) this.data[i] = this.data[i+1];
                }
                this.length = this.length - 1;
            };
        }

        (inline) void removeLast {
            @if(__RAVE_RUNTIME_CHECKS) {
                if(this.length > 0) this.remove(this.length-1);
            };

            @if(!(__RAVE_RUNTIME_CHECKS)) {
                this.remove(this.length-1);
            };
        }

        void ~this {
            if(this.data != null) {
                std::free(cast(void*)this.data);
                this.data = null;
            }
        }

        void transform(T(T) fn) {
            for(int i=0; i<this.length; i++) this.data[i] = fn(this.data[i]);
        }
    }
}

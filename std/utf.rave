import <std/memory> <std/ascii> <std/cstring>

// TODO

namespace std {
    namespace utf {
        (inline) bool isStartOfSequence(int c) => ((c && 0xC0) != 0x80);
        (inline) int strlen(uint* str) {
            int i = 0;
            while(str[i] != '\0'w) i += 1;
        } => i;
    }
    struct ustring {
        uint* data;
        int length;
        int capacity;

        std::ustring this(uint* a) {
            if(a != null) {
                this.length = std::utf::strlen(a);
                this.capacity = this.length*2;
                if(this.capacity == 0) this.capacity = 1;
                this.data = cast(uint*)std::malloc(this.capacity);

                int i = 0;
                while(i<this.length) {
                    this.data[i] = a[i];
                    i += 1;
                }
            }
            else {
                this.length = 0;
                this.capacity = 1;
                this.data = cast(uint*)std::malloc(this.capacity);
            }
        } => this;

        uint* c {
            uint* _data = cast(uint*)std::malloc(this.capacity);
            for(int i=0; i<this.length; i+=1) {
                _data[i] = this.data[i];
            }
        } => _data;

        bool isDeleted => (this.data == null);

        bool has(uint c) {
            bool _has = false;

            int i = 0;
            while(i<this.length) {
                if(this.data[i] == c) {
                    _has = true;
                    i = this.length;
                }
                i += 1;
            }
        } => _has;

        int indexOf(uint c) {
            int i = 0;
            int needed = -1;
            while(i<this.length) {if(this.data[i] == c) {needed = i; i = this.length;} i += 1;}
        } => needed;


        std::ustring ltrim {
            uint* _c = this.c();

            while(std::ascii::isSpace(_c[0])) _c = cast(uint*)((cast(int)_c) + 1);

            std::ustring _s = std::ustring(_c);
        } => _s;

        std::ustring rtrim {
            uint* _c = this.c();

            int i = std::utf::strlen(_c)-1;
            while(std::ascii::isSpace(_c[i])) i -= 1;
            _c[i+1] = '\0';

            std::ustring _s = std::ustring(_c);
        } => _s;

        std::ustring trim {
            std::ustring _l = this.ltrim();
        } => _l.rtrim();

        void ~this {
            std::free(this.data);
        }
    }
}

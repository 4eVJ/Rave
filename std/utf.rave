import <std/memory> <std/ascii> <std/cstring>

namespace std {
    namespace utf {
        (inline) bool isStartOfSequence(uchar c) => ((c && 0xC0) != 0x80);
        (inline) int strlen(uint* str) {
            int i = 0;
            while(str[i] != '\0'w) i += 1;
        } => i;
        (inline) int utflen(uint* str) {
            int i = 0;
            int len = 0;
            uchar* data = cast(uchar*)str;
            while(data[i] != '\0') {
                if(std::utf::isStartOfSequence(data[i])) len += 1;
                i += 1;
            }
        } => len;
        (inline) bool isSpace(uint c) => (c == ' ') || (c == '\r') || (c == '\t') || (c == '\n') || (c == '\v');
        (inline) bool isDigit(uint c) => (c == '0') || (c == '1') || (c == '2') || (c == '3') || (c == '4') || (c == '5') || (c == '6') || (c == '7') || (c == '8') || (c == '9');
    }
    struct ustring {
        uint* data;
        int length;
        int capacity;

        std::ustring this(uint* a) {
            if(a != null) {
                this.length = std::utf::utflen(a);
                this.capacity = this.length*4;
                if(this.capacity == 0) this.capacity = 4;
                this.data = cast(uint*)std::malloc(this.capacity);

                int i = 0;
                while(i<this.length) {
                    this.data[i] = a[i];
                    i += 1;
                }
            }
            else {
                this.length = 0;
                this.capacity = 4;
                this.data = cast(uint*)std::malloc(this.capacity);
            }
        } => this;

        void set(uint* a) {
            if(a != null) {
                this.length = std::utf::utflen(a);
                this.capacity = this.length*4;
                if(this.capacity == 0) this.capacity = 4;
                if(this.data != cast(uint*)null) std::free(cast(void*)this.data);
                this.data = cast(uint*)std::malloc(this.capacity);

                int i = 0;
                while(i<this.length) {
                    this.data[i] = a[i];
                    i += 1;
                }
            }
            else {
                this.length = 0;
                this.capacity = 4;
                if(this.data != cast(uint*)null) std::free(cast(void*)this.data);
                this.data = cast(uint*)std::malloc(this.capacity);
            }
        }

        uint* c {
            uint* _data = cast(uint*)std::malloc(this.capacity);
            for(int i=0; i<this.length; i+=1) {
                _data[i] = this.data[i];
            }
        } => _data;

        bool isDeleted => (this.data == null);

        bool has(uint c) {
            bool _has = false;

            int i = 0;
            while(i<this.length) {
                if(this.data[i] == c) {
                    _has = true;
                    i = this.length;
                }
                i += 1;
            }
        } => _has;

        int indexOf(uint c) {
            int i = 0;
            int needed = -1;
            while(i<this.length) {if(this.data[i] == c) {needed = i; i = this.length;} i += 1;}
        } => needed;


        std::ustring ltrim {
            uint* _c = this.c();

            while(std::ascii::isSpace(_c[0])) _c = cast(uint*)((cast(int)_c) + 1);

            std::ustring _s = std::ustring(_c);
        } => _s;

        std::ustring rtrim {
            uint* _c = this.c();

            int i = std::utf::strlen(_c)-1;
            while(std::ascii::isSpace(_c[i])) i -= 1;
            _c[i+1] = '\0';

            std::ustring _s = std::ustring(_c);
        } => _s;

        std::ustring trim {
            std::ustring _l = this.ltrim();
        } => _l.rtrim();

        void add(uint c) {
            this.length += 1;
            if(this.length == this.capacity) {
                this.capacity = this.capacity * 2;
                this.data = cast(uint*)std::realloc(cast(void*)this.data,this.capacity);
            }
            this.data[this.length-1] = c;
        }

        void append(std::ustring str) {
            int i = 0;
            while(i<str.length) {
                this.add(str.data[i]);
                i += 1;
            }
        }

        void append(uint* cstr) {
            int len = std::utf::strlen(cstr);
            int i = 0;
            while(i<len) {
                this.add(cstr[i]);
                i += 1;
            }
        }

        std::ustring copy {
            std::ustring cp = std::ustring(""w);
            cp.append(*this);
        } => cp;

        std::ustring via(uint c) {
            std::ustring _cp = this.copy();
            _cp.add(c);
        } => _cp;

        std::ustring via(std::ustring s) {
            std::ustring _cp = this.copy();
            _cp.append(s);
        } => _cp;

        std::ustring via(uint* s) {
            std::ustring _cp = this.copy();
            _cp.append(s);
        } => _cp;

        std::ustring replace(uint c, uint to) {
            std::ustring temp = this.copy();

            int i = 0;
            while(i<this.length) {
                if(this.data[i] == c) {
                    temp.data[i] = to;
                }
                i += 1;
            }
        } => temp;

        std::ustring operator+(std::ustring one, std::ustring two) {
            std::ustring third = std::ustring(one.c());
            third.append(two);
        } => third;

        bool compare(std::ustring another) {
            bool isEqual = true;
            if(this.length != another.length) {
                isEqual = false;
            }
            else {
                int i = 0;
                while(i<another.length) {
                    if(this.data[i] != another.data[i]) isEqual = false;
                    i += 1;
                }
            }
        } => isEqual;

        bool compare(uint* another) {
            bool isEqual = true;
            int len = std::utf::strlen(another);

            if(this.length != len) {
                isEqual = false;
            }
            else {
                int i = 0;
                while(i<len) {
                    if(this.data[i] != another[i]) isEqual = false;
                    i += 1;
                }
            }
        } => isEqual;

        bool operator==(std::ustring one, std::ustring two) => one.compare(two);
        bool operator==(std::ustring one, uint* two) => one.compare(two);
        bool operator!=(std::ustring one, std::ustring two) => !(one.compare(two));
        bool operator!=(std::ustring one, uint* two) => !(one.compare(two));
        void operator=(std::ustring* one, uint* two) {
            one[0] = std::ustring(two);
        }

        std::ustring substring(int from, int to) {
            std::ustring temp = ""w;

            int i = from;
            while(i<to) {
                temp.add(this.data[i]);
                i += 1;
            }
        } => temp;

        void ~this {
            std::free(this.data);
        }
    }
}

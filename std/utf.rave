import <std/string> <std/cstring>

namespace std {
    namespace utf {
        (inline) bool isContinuation(char c) => (c && 0xC0) == 0x80;

        (inline) int strlen(char* s) {
            int i = 0;
            int len = 0;
            while(s[i] != '\0') {
                if(!std::utf::isContinuation(s[i])) len += 1;
                i += 1;
            }
        } => len;
    }
}

namespace std {
    struct ustring {
        char* data;
        int length;
        int bytes;
        int capacity;

        std::ustring this(char* s) {
            if(s != null) {
                this.length = std::utf::strlen(s);
                this.bytes = std::cstring::strlen(s);
                this.capacity = this.bytes * 2;
                if(this.capacity == 0) this.capacity = 1;
                this.data = std::malloc(this.capacity);

                int i = 0;
                while(i<this.length) {
                    this.data[i] = s[i];
                    i += 1;
                }
            }
            else {
                this.length = 0;
                this.capacity = 4;
                this.data = std::malloc(this.capacity);
            }
        } => this;

        bool isDeleted => (this.data == null);

        char* c {
            char* temp = std::malloc(this.bytes+1);
            for(int i=0; i<this.bytes; i+=1) {
                temp[i] = this.data[i];
            }
        } => temp;

        void append(char* s) {
            for(int i=0; s[i] != '\0'; i+=1) {
                this.length += 1;
                if(this.capacity > this.length) {
                    this.capacity = this.capacity * 2;
                    this.data = std::realloc(this.data,this.capacity);
                }
                this.data[this.length-1] = s[i];
            }
        }

        void append(std::string s) {
            char* _c = s.c();
            this.append(_c);
            std::free(_c);
        }

        void append(std::ustring s) {
            char* _c = s.c();
            this.append(_c);
            std::free(_c);
        }

        std::ustring copy {
            char* _c = this.c();
            std::ustring cp = std::ustring(_c);
            std::free(_c);
        } => cp;

        void ~this {
            std::free(this.data);
            this.length = 0;
            this.capacity = 0;
        }
    }
}
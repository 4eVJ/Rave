import <std/memory> <std/ascii> <std/vector> <std/cstring> <std/strutil>

namespace std {
    extern(private, vararg, linkname: "sscanf") int format(char* buff, char* fmt);
    namespace utf8 {
        const(int[16]) utfLength = [1,1,1,1,1,1,1,1,0,0,0,0,2,2,3,4];
        const(int[1]) offsets = [
            0, 0x00003080, 0x000E2080,
            0x03C82080, 0xFA082080, 0x82082080
        ];

        bool isStart(char c) => ((c && 0xC0) != 0x80);
        (inline) int utflen(uchar* str) {
            int i = 0;
            int len = 0;
            while(str[i] != '\0') {
                if((str[i] && 0xC0) != 0x80) len += 1;
                i += 1;
            }
        } => len;
        (inline) int charlen(uchar* ch, int idx) => cast(int)(std::utf8::utfLength[(ch[idx] && 0xFF) >. 4]);
        void nextChar(char* ptr, int* idx) {
            idx[0] += 1;
            while((ptr[idx[0]] != '\0') && (!std::utf8::isStart(ptr[idx[0]]))) idx[0] += 1;
        }
        void previousChar(char* ptr, int* idx) {
            idx[0] -= 1;
            while((ptr[idx[0]] != '\0') && (!std::utf8::isStart(ptr[idx[0]]))) idx[0] -= 1;
        }
    }
    
    struct u8string {
        char* data;
        int length;
        int byteLength;
        int capacity;

        std::u8string this(char* a) {
            if(a != null) {
                this.length = std::utf8::utflen(a);
                this.byteLength = std::cstring::strlen(a);
                this.capacity = this.byteLength * 2;
                if(this.capacity == 0) this.capacity = 1;
                this.data = std::malloc(this.capacity);

                int i = 0;
                while(i<this.byteLength) {
                    this.data[i] = a[i];
                    i += 1;
                }
            }
            else {
                this.length = 0;
                this.byteLength = 0;
                this.capacity = 1;
                this.data = std::malloc(this.capacity);
            }
        } => this;

        //void ~this {std::free(this.data);}

        void set(char* a) {
            if(a != null) {
                this.length = std::utf8::utflen(a);
                this.byteLength = std::cstring::strlen(a);
                this.capacity = this.byteLength * 2;
                if(this.capacity == 0) this.capacity = 1;
                if(this.data != null) std::free(this.data);
                this.data = std::malloc(this.capacity);

                int i = 0;
                while(i<this.length) {
                    this.data[i] = a[i];
                    i += 1;
                }
            }
            else {
                this.length = 0;
                this.byteLength = 0;
                this.capacity = 1;
                if(this.data != null) std::free(this.data);
                this.data = std::malloc(this.capacity);
            }
        }

        bool isDeleted => (this.data == null);

        char* c {
            char* temp = std::malloc(this.length+1);
            int i = 0;
            while(i<this.length) {temp[i] = this.data[i]; i += 1;}
            temp[i] = '\0';
        } => temp;

        (inline) char toChar => this.data[0];
        long toLong {
            char* buff = this.c();
            long n = libc::strtol(buff,cast(char**)null,10);
            std::free(buff);
        } => n;
        (inline) int toInt => cast(int)this.toLong();

        int indexOf(char* c) {
            int clen = std::cstring::strlen(c);
            int result = -1;

            int idx = 0;
            while(idx < this.byteLength) {
                if(std::utf8::isStart(this.data[idx])) {
                    int chlen = std::utf8::charlen(this.data, idx);
                    if(chlen == clen) {
                        bool _equal = true;
                        int idx2 = idx;
                        int cIdx = 0;
                        while((_equal) && (idx2 != (idx2 + chlen))) {
                            if(this.data[idx2] != c[cIdx]) _equal = false;
                        }
                        if(_equal) {
                            result = idx;
                            idx = this.byteLength;
                        }
                    }
                }
                idx += 1;
            }
        } => result;

        void add(char c) {
            this.length += 1;
            this.byteLength += 1;
            if(this.byteLength == this.capacity) {
                this.capacity = this.capacity * 2;
                this.data = std::realloc(this.data,this.capacity);
            }
            this.data[this.length-1] = c;
        }

        void append(char* cstr) {
            int len = std::cstring::strlen(cstr);
            int i = 0;
            while(i<len) {
                this.add(cstr[i]);
                i += 1;
            }
        }

        void append(std::u8string str) {
            int i = 0;
            while(i<str.byteLength) {
                this.add(str.data[i]);
                i += 1;
            }
        }

        std::u8string copy {
            std::u8string cp = std::u8string("");
            for(int i=0; i<this.byteLength; i+=1) {
                cp.add(this.data[i]);
            }
        } => cp;

        std::u8string via(char c) {
            std::u8string _cp = this.copy();
            _cp.add(c);
        } => _cp;

        std::u8string via(std::u8string s) {
            std::u8string _cp = this.copy();
            _cp.append(s);
        } => _cp;

        std::u8string via(char* s) {
            std::u8string _cp = this.copy();
            _cp.append(s);
        } => _cp;

        std::u8string replace(char c, char to) {
            std::u8string temp = this.copy();

            int i = 0;
            while(i<this.length) {
                if(this.data[i] == c) {
                    temp.data[i] = to;
                }
                i += 1;
            }
        } => temp;

        std::u8string operator+(std::u8string one, std::u8string two) {
            std::u8string third = std::u8string(one.c());
            third.append(two);
        } => third;

        bool compare(std::u8string another) {
            bool isEqual = true;
            if(this.length != another.length) isEqual = false;
            else {
                int i = 0;
                while(i<another.byteLength) {
                    if(this.data[i] != another.data[i]) isEqual = false;
                    i += 1;
                }
            }
        } => isEqual;

        bool compare(char* another) {
            bool isEqual = true;
            int len = std::cstring::strlen(another);

            if(this.length != len) isEqual = false;
            else {
                int i = 0;
                while(i<len) {
                    if(this.data[i] != another[i]) isEqual = false;
                    i += 1;
                }
            }
        } => isEqual;

        bool operator==(std::u8string one, std::u8string two) => one.compare(two);
        bool operator==(std::u8string one, char* two) => one.compare(two);
        bool operator!=(std::u8string one, std::u8string two) => !(one.compare(two));
        bool operator!=(std::u8string one, char* two) => !(one.compare(two));
        void operator=(std::u8string* one, char* two) {one[0] = std::u8string(two);}

        std::u8string substring(int from, int to) {
            std::u8string temp = "";

            int u8Cnt = 0;
            int i = 0;
            bool active = false;
            while(u8Cnt < to) {
                if(std::utf8::isStart(this.data[i])) {
                    if(active == true) temp.add(this.data[i]);
                    else if(from == u8Cnt) active = true;
                    u8Cnt += 1;
                }
                i += 1;
            }
        } => temp;

        std::vector<std::u8string> split(char ch) {
            auto parts = std::vector<std::u8string>();

            int idx = 0;
            std::u8string buffer = "";
            while(idx < this.byteLength) {
                if(this.data[idx] != ch) {
                    buffer.add(this.data[idx]);
                    idx += 1;
                }
                else {
                    if(buffer.length > 0) parts.add(buffer.copy());
                    buffer.length = 0;
                    buffer.byteLength = 0;
                    idx += 1;
                }
            }
            if(buffer.length > 0) parts.add(buffer.copy());
            ~buffer;
        } => parts;

        std::u8string ltrim {
            int idx = 0;
            while((idx < this.length) && (std::ascii::isSpace(this.data[idx]))) idx += 1;
        } => this.substring(idx, this.length);

        std::u8string rtrim {
            int idx = this.length - 1;
            while(std::ascii::isSpace(this.data[idx])) idx -= 1;
        } => this.substring(0, idx+1);

        std::u8string trim {
            std::u8string _l = this.ltrim();
        } => _l.rtrim();

        int fromHex {
            int hex = 0;
            char* buffer = this.c();
            std::format(cast(char*)((cast(int)buffer)+2), "%x", &hex);
            std::delete(buffer);
        } => hex;

        std::u8string toLower {
            std::u8string buffer = "";
            for(int i=0; i<this.length; i+=1) {
                buffer.add(std::ascii::toLower(this.data[i]));
            }
        } => buffer;
    }
    namespace u8string {
        (inline) std::u8string fromNumber(long n) {
            char* buf = std::malloc(std::lengthOfNumber(n)+2);
            libc::cformat(buf,"%ld",n);
            std::u8string sbuf = std::u8string(buf);
            std::delete(buf);
        } => sbuf;
    }
}
import <std/memory> <std/ascii> <std/vector> <std/cstring> <std/strutil>

namespace std {
    extern(private, vararg, linkname: "sscanf") int format(char* buff, char* fmt);
    
    namespace utf8 {
        const(int[16]) utfLength = [1,1,1,1,1,1,1,1,0,0,0,0,2,2,3,4];
        const(int[1]) offsets = [
            0, 0x00003080, 0x000E2080,
            0x03C82080, 0xFA082080, 0x82082080
        ];

        bool isStart(char c) => ((c && 0xC0) != 0x80);

        int utflen(uchar* str) {
            int i = 0;
            while(str[i] != '\0') {
                if((str[i] && 0xC0) != 0x80) return += 1;
                i += 1;
            }
        }

        int charlen(uchar* ch, int idx) => cast(int)(std::utf8::utfLength[(ch[idx] && 0xFF) >. 4]);

        int next(uchar* str) {
            return += 1;
            while((str[return] != '\0') && (!(std::utf8::isStart(str[return])))) return += 1;
        }

        uint utfAt(uchar* str, int at) {
            uchar* ptr = itop(uchar*, ptoi(str)+at);

            if((ptr[0] && 0x80) == 0) return = cast(uint)ptr[0];
            else if((ptr[0] && 0xE0) == 0xC0) {
                return = (ptr[0] && 0x1F) <. 6;
                return = return || (ptr[1] && 0x3F);
            }
            else if((ptr[0] && 0xF0) == 0xE0) {
                return = (ptr[0] && 0xF) <. 12;
                return = return || (ptr[1] && 0x3F) <. 6;
                return = return || (ptr[2] && 0x3F);
            }
            else if((ptr[0] && 0xF8) == 0xF0) {
                return = (ptr[0] && 0x7) <. 18;
                return = return || (ptr[1] && 0x3F) <. 12;
                return = return || (ptr[2] && 0x3F) <. 6;
                return = return || (ptr[3] && 0x3F);
            }
            else if((ptr[0] && 0xFC) == 0xF8) {
                return = (ptr[0] && 0x3) <. 24;
                return = return || (ptr[0] && 0x3F) <. 18;
                return = return || (ptr[0] && 0x3F) <. 12;
                return = return || (ptr[0] && 0x3F) <. 6;
                return = return || (ptr[0] && 0x3F);
            }
            else if((ptr[0] && 0xFE) == 0xFC) {
                return = (ptr[0] && 0x1) <. 30;
                return = return || (ptr[0] && 0x3F) <. 24;
                return = return || (ptr[0] && 0x3F) <. 18;
                return = return || (ptr[0] && 0x3F) <. 12;
                return = return || (ptr[0] && 0x3F) <. 6;
                return = return || (ptr[0] && 0x3F);
            }
            else return = -1;
        }
    }
    
    (data: "data", length: "bytes") struct u8string {
        char* data;
        int length;
        int bytes;
        int capacity;

        std::u8string this(char* a) {
            std::u8string this;
            if(a != null) {
                this.length = std::utf8::utflen(a);
                this.bytes = std::cstring::strlen(a);
                this.capacity = (this.bytes * 2) + 2;
                if(this.capacity == 0) this.capacity = 2;
                this.data = std::malloc(this.capacity);

                int i = 0;
                while(i<this.bytes) {
                    this.data[i] = a[i];
                    i += 1;
                }
                this.data[i] = '\0';
            }
            else {
                this.length = 0;
                this.bytes = 0;
                this.capacity = 2;
                this.data = std::malloc(this.capacity);
                this.data[0] = '\0';
            }
        } => this;

        void ~this {
            std::free(this.data);
            this.data = null;
        }

        void setValue(char* a) {
            if(a != null) {
                this.length = std::utf8::utflen(a);
                this.bytes = std::cstring::strlen(a);
                this.capacity = (this.bytes * 2) + 2;
                if(this.capacity == 0) this.capacity = 2;
                if(this.data != null) std::free(this.data);
                this.data = std::malloc(this.capacity);

                int i = 0;
                while(i<this.length) {
                    this.data[i] = a[i];
                    i += 1;
                }
                this.data[i] = '\0';
            }
            else {
                this.length = 0;
                this.bytes = 0;
                this.capacity = 2;
                if(this.data != null) std::free(this.data);
                this.data = std::malloc(this.capacity);
                this.data[0] = '\0';
            }
        }

        (inline) void set(int index, uchar ch) {
            // TODO: add support of UTF-8 setting
            if((index >= 0) && (index < this.length)) this.data[index] = ch;
        }

        (inline) uint at(int index) {
            if((index >= 0) && (index < this.length)) {
                uchar* ptr = this.data;
                for(int i=0; i<index; i++) ptr = itop(uchar*, ptoi(ptr)+std::utf8::next(ptr));
                return = std::utf8::utfAt(ptr, 0);
            }
            else return = cast(uint)'\0';
        }

        (inline) bool isDeleted => (this.data == null);

        (inline) char* c => this.data;

        char toChar => this.data[0];
        (inline) long toLong => libc::strtol(this.c(), cast(char**)null, 10);
        int toInt => cast(int)this.toLong();

        int indexOf(char* c) {
            int clen = std::cstring::strlen(c);
            int result = -1;

            int idx = 0;
            while(idx < this.bytes) {
                if(std::utf8::isStart(this.data[idx])) {
                    int chlen = std::utf8::charlen(this.data, idx);
                    if(chlen == clen) {
                        bool _equal = true;
                        int idx2 = idx;
                        int cIdx = 0;
                        while((_equal) && (idx2 != (idx2 + chlen))) {
                            if(this.data[idx2] != c[cIdx]) _equal = false;
                        }
                        if(_equal) {
                            result = idx;
                            idx = this.bytes;
                        }
                    }
                }
                idx += 1;
            }
        } => result;

        void add(char c) {
            this.length += 1;
            this.bytes += 1;
            if(this.bytes >= this.capacity) {
                this.data = std::realloc(this.data, this.capacity, this.capacity * 2);
                this.capacity = this.capacity * 2;
            }
            this.data[this.length-1] = c;
        }

        void appendC(char* cstr) {
            int len = std::cstring::strlen(cstr);
            int i = 0;
            while(i<len) {
                this.add(cstr[i]);
                i += 1;
            }
        }

        void append(std::u8string str) {
            int i = 0;
            while(i<str.bytes) {
                this.add(str.data[i]);
                i += 1;
            }
        }

        std::u8string copy {
            std::u8string cp = std::u8string("");
            cp.append(this);
        } => cp;

        std::u8string replace(char c, char to) {
            std::u8string temp = this.copy();

            int i = 0;
            while(i<this.length) {
                if(this.data[i] == c) temp.data[i] = to;
                i += 1;
            }
        } => temp;

        void operator=(std::u8string* one, char* two) {one[0] = std::u8string(two);}

        std::u8string operator+(std::u8string one, std::u8string two) {
            std::u8string third = "";
            for(int i=0; i<one.length; i+=1) third.add(one.data[i]);
            for(int i=0; i<two.length; i+=1) third.add(two.data[i]);
        } => third;

        bool operator==(std::u8string one, std::u8string two) {
            bool isEqual = true;
            if(one.length != two.length) isEqual = false;
            else {
                for(int i=0; i<one.length; i+=1) {
                    if(one.data[i] != two.data[i]) {
                        isEqual = false;
                        break;
                    }
                }
            }
        } => isEqual;

        bool operator==(std::u8string one, char* two) {
            bool isEqual = true;
            int length = std::cstring::strlen(two);
            if(one.length != length) isEqual = false;
            else {
                for(int i=0; i<one.length; i+=1) {
                    if(one.data[i] != two[i]) {
                        isEqual = false;
                        break;
                    }
                }
            }
        } => isEqual;

        std::u8string substring(int from, int to) {
            std::u8string temp = "";

            int u8Cnt = 0;
            int i = 0;
            bool active = false;
            while(u8Cnt < to) {
                if(std::utf8::isStart(this.data[i])) {
                    if(active == true) temp.add(this.data[i]);
                    else if(from == u8Cnt) active = true;
                    u8Cnt += 1;
                }
                i += 1;
            }
        } => temp;

        std::vector<std::u8string> split(char ch) {
            std::vector<std::u8string> parts = std::vector<std::u8string>();

            int idx = 0;
            std::u8string buffer = "";
            while(idx < this.bytes) {
                if(this.data[idx] != ch) {
                    buffer.add(this.data[idx]);
                    idx += 1;
                }
                else {
                    if(buffer.length > 0) parts.add(buffer.copy());
                    buffer.length = 0;
                    buffer.bytes = 0;
                    idx += 1;
                }
            }
            if(buffer.length > 0) parts.add(buffer.copy());
            ~buffer;
        } => parts;

        std::u8string ltrim {
            int idx = 0;
            while((idx < this.length) && (std::ascii::isSpace(this.data[idx]))) idx += 1;
        } => this.substring(idx, this.length);

        std::u8string rtrim {
            int idx = this.length - 1;
            while(std::ascii::isSpace(this.data[idx])) idx -= 1;
        } => this.substring(0, idx+1);

        std::u8string trim => this.ltrim().rtrim();

        int fromHex {
            int hex = 0;
            char* buffer = this.c();
            std::format(cast(char*)((cast(int)buffer)+2), "%x", &hex);
        } => hex;

        std::u8string insert(int pos, char* str) {
            std::u8string buffer = "";
            int i = 0;
            while(i < pos) {
                buffer.add(this.data[i]);
                i += 1;
            }
            buffer.appendC(str);
            while(i < this.length) {
                buffer.add(this.data[i]);
                i += 1;
            }
        } => buffer;
    }

    namespace u8string {
        (inline) std::u8string fromNumber(long n) {
            char* buf = std::malloc(std::lengthOfNumber(n)+2);
            libc::cformat(buf,"%ld",n);
            std::u8string sbuf = std::u8string(buf);
            std::free(buf);
        } => sbuf;
    }
}

@if(__RAVE_OS == "WINDOWS") {
    namespace std {
        namespace utf8 {
            extern(linkname: "MultiByteToWideChar") int __MultiByteToWideChar(uint cp, int flags, uchar* str, int cbMB, ushort* u16Str, int cbWC);
            extern(linkname: "WideCharToMultiByte") int __WideCharToMultiByte(uint cp, int flags, ushort* u16Str, int cbWC, uchar* str, int cbMB, uchar* nStr, int* defC);

            ushort* toUtf16(uchar* str) {
                int bufferSize = std::utf8::__MultiByteToWideChar(65001, 0, str, -1, cast(ushort*)null, 0);
                ushort* buffer = cast(ushort*)std::malloc(bufferSize);
                std::utf8::__MultiByteToWideChar(65001, 0, str, -1, buffer, bufferSize);
            } => buffer;

            uchar* fromUtf16(ushort* wstr) {
                int bufferSize = std::utf8::__WideCharToMultiByte(65001, 0, wstr, -1, null, -1, null, cast(int*)null);
                uchar* buffer = std::malloc(bufferSize);
                std::utf8::__WideCharToMultiByte(65001, 0, wstr, -1, buffer, bufferSize, null, cast(int*)null);
            } => buffer;
        }
    }
};
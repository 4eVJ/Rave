import <std/error>

namespace std {
    char* globalBuffer = null;
    int globalBufferSize = 0;
    int globalBufferIterator = 0;

    namespace allocator {
        alias NotInitialized = 100;
        alias NotEnoughMemory = 101;

        void setBuffer(char* buffer, int size) {
            std::globalBuffer = buffer;
            std::globalBufferSize = size;
        }

        std::error<void*> malloc(int size) {
            std::error<void*> result;
            if(std::globalBuffer == null) {
                result.message = "The global buffer was not initialized!";
                result.code = std::allocator::NotInitialized;
            }
            else if((std::globalBufferIterator+size) >= std::globalBufferSize) {
                result.message = "There is not enough memory in the global buffer!";
                result.code = std::allocator::NotEnoughMemory;
            }
            else {
                result.value = &std::globalBuffer[std::globalBufferIterator];
                std::globalBufferIterator += size;
            }
        } => result;
    }
}
namespace std {
    namespace map {
        struct Entry<KE, VE> {
            KE key;
            VE value;
            std::map::Entry<KE, VE>* next;
        }
    }

    alias mapSize = 64;

    int hash(void* data, int size) {
        return = 5381;
        int idx = 0;

        while(idx < size) {
            return = ((return <. 5) + return) + data[idx];
            idx += 1;
        }

        if(return < 0) return = -return;
    } => return % std::mapSize;

    struct map<K, V> {
        std::map::Entry<K, V>** table;
        int length;

        std::map<K, V> this {
            std::map<K, V> this;
            this.length = 0;
            this.table = cast(std::map::Entry<K, V>**)std::malloc(sizeof(std::map::Entry<K, V>*) * std::mapSize);
            for(int i=0; i<std::mapSize; i++) this.table[i] = null;
        } => this;

        void set(K key, V value) {
            @if(@hasMethod(K, hash)) {
                uint index = key.hash();
            };

            @if(!@hasMethod(K, hash)) {
                uint index = std::hash(cast(void*)&key, sizeof(K));
            };

            std::map::Entry<K, V>* entry = table[index];
            bool setted = false;
            while(entry != null) {
                if(key == entry.key) {
                    entry.value = value;
                    setted = true;
                    break;
                }
                entry = entry.next;
            }

            if(!setted) {
                if(table[index] == null) {
                    table[index] = cast(std::map::Entry<K, V>*)std::malloc(sizeof(std::map::Entry<K, V>));
                    table[index].key = key;
                    table[index].value = value;
                    table[index].next = null;
                }
                else {
                    std::map::Entry<K, V>* previous = null;
                    entry = table[index];
                    while(entry != null) {
                        previous = entry;
                        entry = entry.next;
                    }
                    entry = cast(std::map::Entry<K, V>*)std::malloc(sizeof(std::map::Entry<K, V>));
                    entry.key = key;
                    entry.value = value;
                    entry.next = null;
                    previous.next = entry;
                }
                length += 1;
            }
        }

        V get(K key) {
            return = cast(V)null;
            @if(@hasMethod(K, hash)) {
                uint index = key.hash();
            };

            @if(!@hasMethod(K, hash)) {
                uint index = std::hash(cast(void*)&key, sizeof(K));
            };

            std::map::Entry<K, V>* entry = table[index];

            while(entry != null) {
                if(key == entry.key) {
                    return = entry.value;
                    break;
                }
                else entry = entry.next;
            }
        }

        bool remove(K key) {
            return = false;
            @if(@hasMethod(K, hash)) {
                uint index = key.hash();
            };

            @if(!@hasMethod(K, hash)) {
                uint index = std::hash(cast(void*)&key, sizeof(K));
            };

            std::map::Entry<K, V>* entry = table[index];
            std::map::Entry<K, V>* prev = null;

            while(entry != null) {
                if(key == entry.key) {
                    entry.key = cast(K)null;
                    entry.value = cast(V)null;
                    length -= 1;
                    return = true;
                    break;
                }
                else {
                    prev = entry;
                    entry = entry.next;
                }
            }
        }

        void clear {
            for(int i=0; i<std::mapSize; i++) {
                std::map::Entry<K, V>* entry = table[i];
                std::map::Entry<K, V>* old = null;
                while(entry != null) {
                    old = entry;
                    entry = entry.next;
                    std::free(cast(void*)old);
                }
            }
            length = 0;
        }

        void ~this {
            if(this.table != null) {
                for(int i=0; i<std::mapSize; i++) {
                    std::map::Entry<K, V>* entry = this.table[i];
                    std::map::Entry<K, V>* old = null;
                    while(entry != null) {
                        old = entry;
                        entry = entry.next;
                        std::free(cast(void*)old);
                    }
                }
                std::free(cast(void*)(this.table));
                this.table = null;
            }
        }
    }
}
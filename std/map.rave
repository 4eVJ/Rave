import <std/vector> <std/io>

namespace std {
    struct map<K,V> {
        std::vector<std::pair<K,V>> first;
        std::vector<std::pair<K,V>> second;
        int length;

        std::map<K,V>* this {
            this.first = std::vector<std::pair<K,V>>();
            this.second = std::vector<std::pair<K,V>>();
            this.length = 0;
        } => this;

        void add(K key, V value) {
            int _hash = (cast(int)key) % 2;

            if(_hash == 0) {
                this.first.add(std::pair<K,V>(key,value));
            }
            else {
                this.second.add(std::pair<K,V>(key,value));
            }
        }

        void set(K key, V newvalue) {
            int _hash = (cast(int)key) % 2;

            if(_hash == 0) {
                for(int i=0; i<this.first.length; i+=1) {
                    if(this.first.data[i].first == key) {
                        this.first.data[i].second = newvalue;
                        break;
                    }
                }
            }
            else {
                for(int i=0; i<this.second.length; i+=1) {
                    if(this.second.data[i].first == key) {
                        this.second.data[i].second = newvalue;
                        break;
                    }
                }
            }
        }

        bool has(K key) {
            bool complete = false;
            int _hash = (cast(int)key) % 2;

            if(_hash == 0) {
                for(int i=0; i<this.first.length; i+=1) {
                    if(this.first.data[i].first == key) {
                        complete = true;
                        break;
                    }
                }
            }
            else {
                for(int i=0; i<this.second.length; i+=1) {
                    if(this.second.data[i].first == key) {
                        complete = true;
                        break;
                    }
                }
            }
        } => complete;

        V get(K key) {
            V toret = cast(V)null;
            int _hash = (cast(int)key) % 2;

            if(_hash == 0) {
                for(int i=0; i<this.first.length; i+=1) {
                    if(this.first.data[i].first == key) {
                        toret = this.first.data[i].second;
                        break;
                    }
                }
            }
            else {
                for(int i=0; i<this.second.length; i+=1) {
                    if(this.second.data[i].first == key) {
                        toret = this.second.data[i].second;
                        break;
                    }
                }
            }
        } => toret;

        void remove(K key) {
            int _hash = (cast(int)key) % 2;

            if(_hash == 0) {
                for(int i=0; i<this.first.length; i+=1) {
                    if(this.first.data[i].first == key) {
                        this.first.remove(i);
                        break;
                    }
                }
            }
            else {
                for(int i=0; i<this.second.length; i+=1) {
                    if(this.second.data[i].first == key) {
                        this.second.remove(i);
                        break;
                    }
                }
            }
        }
    }
}
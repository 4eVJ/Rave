// TODO: need to be improved
namespace std {
    struct map<K, V> {
        std::pair<K, V>* data;
        int length;
        int capacity;

        std::map<K,V> this {
            std::map<K, V> this;
            this.data = cast(std::pair<K, V>*)std::malloc((sizeof(K) + sizeof(V))+1);
            this.length = 0;
            this.capacity = (sizeof(K) + sizeof(V))+1;
        } => this;

        void add(K key, V value) {
            this.data[this.length] = std::pair<K, V>(key, value);
            this.length += 1;
            if(this.capacity <= ((sizeof(K) + sizeof(V) * this.length))) this.capacity = this.capacity * 2;
        }

        V get(K key) {
            return = null;
            for(int i=0; i<this.length; i++) {
                if(this.data[i].first == key) {
                    return = this.data[i].second;
                    break;
                }
            }
        }

        int getIndex(K key) {
            return = -1;
            for(int i=0; i<this.length; i++) {
                if(this.data[i].first == key) {
                    return = i;
                    break;
                }
            }
        }

        (inline) bool has(K key) => (this.getIndex(key) != -1);

        void remove(K key) {
            int index = this.getIndex(key);
            if(index != -1) {
                for(int i=index; i<this.length; i+=1) {
                    if((i+1) < this.length) this.data[i] = this.data[i+1];
                }
                this.length = this.length - 1;
            }
        }

        void ~this {
            if(this.data != null) {
                std::free(cast(void*)this.data);
                this.data = cast(std::pair<K, V>*)null;
            }
        }
    }
}
import <std/ascii>

namespace std {
    namespace unicode {
        (inline) bool isSpace(uint c) => (c == ' ') || (c == '\r') || (c == '\t') || (c == '\n') || (c == '\v');
        (inline) bool isDigit(uint c) => (c >= '0') && (c <= '9');

        (inline) uint* charInChars(uint* chars, uint c) {
            int i = 0;
            uint* ptr = null;
            bool active = true;
            while((chars[i] != '\0') && active) {
                if(chars[i] == c) {
                    ptr = &chars[i];
                    active = false;
                }
                i += 1;
            }
        } => ptr;

        (inline) bool isLower(uint c) {
            return = false;
            if(c < 128) return = (c > 96) && (c < 123);
            else {
                if((c > 1071) && (c < 1104)) return = true; // Cyrillic (russian)
                // TODO: add completely support of cyrillic
            }
        }

        (inline) bool isUpper(uint c) {
            return = false;
            if(c < 128) return = (c > 64) && (c < 91);
            else {
                if((c > 1039) && (c < 1072)) return = true; // Cyrillic (russian)
                // TODO: add completely support of cyrillic
            }
        }

        (inline) uint toLower(uint c) {
            uint tmp = c;
            if(c < 128) tmp = std::ascii::toLower(c);
            else {
                if((c > 1039) && (c < 1072)) tmp = c + 32; // Cyrillic (russian)
                // TODO: add completely support of cyrillic
            }
        } => tmp;

        (inline) uint toUpper(uint c) {
            uint tmp = c;
            if(c < 128) tmp = std::ascii::toUpper(c);
            else {
                if((c > 1071) && (c < 1104)) tmp = c - 32; // Cyrillic (russian)
                // TODO: add completely support of cyrillic
            }
        } => tmp;
    }
}
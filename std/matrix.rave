import <std/io>

namespace std {
    struct matrix<T> {
        T* data;
        int rows;
        int columns;

        std::matrix<T> this(int rows, int columns) {
            std::matrix<T> this;
            this.data = cast(T*)std::malloc(sizeof(T) * rows * columns);
            for(int i=0; i<(rows * columns); i++) this.data[i] = cast(T)0;
            this.rows = rows;
            this.columns = columns;
        } => this;

        (inline) void set(int r, int c, T value) {
            if((r >= 0) && (r < this.rows) && (c >= 0) && (c < this.columns)) this.data[(r * this.rows) + c] = value;
        }

        (inline) T get(int r, int c) {
            if((r >= 0) && (r < this.rows) && (c >= 0) && (c < this.columns)) return = this.data[(r * this.rows) + c];
        }

        void add(std::matrix<T> mat) {
            if((this.rows == mat.rows) && (this.columns == mat.columns) && (mat.data != null)) {
                for(int y=0; y<this.rows; y++) {
                    for(int x=0; x<this.columns; x++) this.set(y, x, this.get(y, x) + mat.get(y, x));
                }
            }
        }

        void sub(std::matrix<T> mat) {
            if((this.rows == mat.rows) && (this.columns == mat.columns) && (mat.data != null)) {
                for(int y=0; y<this.rows; y++) {
                    for(int x=0; x<this.columns; x++) this.set(y, x, this.get(y, x) - mat.get(y, x));
                }
            }
        }

        std::matrix<T> multiply(std::matrix<T> mat) {
            if(mat.data != null) {
                return = std::matrix<T>(this.rows, mat.columns);
                for(int y=0; y<this.rows; y++) {
                    for(int x=0; x<mat.columns; x++) {
                        for(int k=0; k<mat.rows; k++) return.set(y, x, return.get(y, x) + (this.get(y, k) * mat.get(k, x)));
                    }
                }
            }
        }

        void filter(T(T) fn) {
            for(int i=0; i<(this.rows * this.columns); i++) this.data[i] = fn(this.data[i]);
        }

        void ~this {
            if(this.data != null) {
                std::free(cast(void*)this.data);
                this.data = null;
            }
        }
    }
}
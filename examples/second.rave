import <std/io> <std/vector> <std/time> <std/random> <std/crypto>

struct Block {
    long index;
    long proof;
    std::time timestamp;
    std::string miner;
    std::string previousHash;

    Block* this => this;

    std::string hash {

    } => null;

    bool isValid(Block* prev) {
        bool isv = true;

        if(this.previousHash != prev.hash()) isv = false;
    } => isv;
}

struct Blockchain {
    std::vector<Block*> blocks;
    int diff;
    int maxAward;

    Block* createBlock(long proof, std::string previousHash, std::string miner) {
        std::time t = std::getLocalTime();
        Block* _new = Block();
        _new.index = cast(long)(this.blocks.length + 1);
        _new.proof = proof;
        _new.timestamp = t;
        _new.miner = miner;
        _new.previousHash = previousHash;
        
        if((this.blocks.length > 0) && !(this.blocks.data[this.blocks.length-1].isValid(this.blocks.data[this.blocks.length-2]))) {
            std::printf("Block is invalid\n");
            std::exit(1);
        }
        else {
            this.blocks.add(_new);
        }
    } => _new;

    Block* getPrevBlock(int i) => this.blocks.data[i];

    Blockchain this(int diff, int maxAward) {
        this.blocks = std::vector<Block*>();
        this.diff = diff;
        this.maxAward = maxAward;

        std::time t = std::getLocalTime();
        Block* _new = Block();
        _new.index = cast(long)(this.blocks.length + 1);
        _new.proof = cast(long)1;
        _new.timestamp = t;
        _new.miner = std::string("Core");
        _new.previousHash = std::string("0");
        
        if((this.blocks.length > 0) && !(this.blocks.data[this.blocks.length-1].isValid(this.blocks.data[this.blocks.length-2]))) {
            std::printf("Block is invalid\n");
            std::exit(1);
        }
        else {
            this.blocks.add(_new);
        }
    } => this;
}

void main {
    Blockchain bc = Blockchain(5,10);


}